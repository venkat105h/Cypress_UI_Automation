/*
Author: Rajeev Pramanik
Description: This Script will make inactive/active of added roles with verification as an super admin in dashboard.
Timestamp: 20th Jan 2022 11:30 AM
Modified: Rajeev Pramanik 17th Jan 2022 10:30 AM
Description: Added Test Cases according to review points.
*/

import {sendRequest} from '../../helper/CommonUtil';
import environment from '../../config/environment';
import { assert, expect } from 'chai';
import Responsemessages from '../../config/Responsemessages';
import casual from 'casual';
require('dotenv').config();

function addDays(dateObj, numDays) {
    dateObj.setDate(dateObj.getDate() + numDays);
    return dateObj;
}

function addTime(dateObj, numTime) {
    dateObj.setTime(dateObj.getTime() + (numTime * 60 * 60 * 1000));
    return dateObj;
  }
var absorb_razorpay_value
var pass_razorpay_value
var razorpay_per_ticket_value
var absorb_stripe_value
var pass_stripe_value
var stripe_per_ticket_value
var transaction_id_value
var coupon_code_name_value

describe('CRUD for Admin Roles.', () => {

    it.only('Org Dashboard sign up and verify the response: POST /api/v1/user/auth/signup', async () => 
    {
        const str1 = 'rajeev+org_dash';
        const str2 = '@hubilo.com';
        const f = new Date();
        let timestamp4 = f.getTime();
        var final_org_dash_signup_email = str1+timestamp4+str2;

        var org_dash_signup_fname = casual.first_name;
        var org_dash_signup_lname = casual.last_name;
        var org_dash_signup_org_name = casual.company_name;
        
        global.final_org_dash_signup_email;
        global.org_dash_signup_fname;
        global.org_dash_signup_lname;
        global.org_dash_signup_org_name;

        const   org_dash_signup_body = 
        {
            "data": {
                "email": final_org_dash_signup_email,
                "firstName": org_dash_signup_fname,
                "lastName": org_dash_signup_lname,
                "password": "0Qwer!y0",
                "organisation": org_dash_signup_org_name,
                "captchaResponse": "",
                "lastUrl": ""
            }
        }
        var response = await sendRequest(environment.baseURL, '/api/v1/user/auth/signup', {'Content-Type':'application/json'},'post', org_dash_signup_body)
        if (response.status == 200)
        {

            expect(response.body.status).to.equal(200);
            global.org_dash_signup_etoken = response.body.data.token;
            global.org_dash_signup_id = response.body.data.userData.id;
            global.org_dash_signup_user_role_id = response.body.data.userData.user_role_id;
            global.org_dash_signup_user_email = response.body.data.userData.email;
            global.org_dash_signup_first_name = response.body.data.userData.first_name;
            global.org_dash_signup_last_name = response.body.data.userData.last_name;
            global.org_dash_signup_last_organisation = response.body.data.userData.organisation;

            expect(response.body.data.userData.email).to.equal(final_org_dash_signup_email);
            expect(response.body.data.userData.first_name).to.equal(org_dash_signup_fname);
            expect(response.body.data.userData.last_name).to.equal(org_dash_signup_lname);
            expect(response.body.data.userData.organisation).to.equal(org_dash_signup_org_name);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Org Dashboard create an event and verify the response: POST /backend/api/v2/events', async () => 
    {
        var startDate = new Date().getTime()
        var endDate = (addDays(new Date(), 3)).getTime()

        global.startDate;
        global.endDate;

        const   org_dash_create_event_body = 
        {
            "data": {
                "name": casual.title,
                "description": "<p>"+casual.sentence+"</p>",
                "timezone_id": 94,
                "start_time_milli": startDate,
                "end_time_milli": endDate,
                "linkedin_url": "",
                "website_url": "",
                "instagram_url": "",
                "fb_url": "",
                "twitter_url": "",
                "eventMetaTypeId": 1,
                "eventMetaTypeValue": "",
                "event_languages": [
                    34
                ],
                "base_language": 34
            }
        }
        var response = await sendRequest(environment.baseURL1, '/backend/api/v2/events', {'organiserid':global.org_dash_signup_id,'Content-Type':'application/json', 'authorization':'Bearer '+global.org_dash_signup_etoken},'post', org_dash_create_event_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(200);
            global.org_dash_signup_event_id = response.body.data.event_id;
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser EVENTS DATA - Fetch the added event details from Admin Dashboard user and store certain response data.: GET /backend/api/v1/organisations/org_id/events/event_id', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            global.org_dash_created_event_start_date_time = response.body.data.start_time;
            global.org_dash_created_event_end_date_time = response.body.data.end_time;

            global.org_dash_created_event_start_date__splitted = global.org_dash_created_event_start_date_time.split(' ')[0];
            global.org_dash_created_event_end_date__splitted = global.org_dash_created_event_end_date_time.split(' ')[0];

            global.org_dash_created_event_name = response.body.data.name;
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.id).to.equal(global.org_dash_signup_event_id);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Org Dashboard create an agenda days and verify the response: POST /backend/api/v2/events/agendadays', async () => 
    {
        const   org_dash_create_agenda_body = 
        {
            "data": {
                "start_date": global.org_dash_created_event_start_date__splitted,
                "end_date": global.org_dash_created_event_end_date__splitted
            }
        }
        var response = await sendRequest(environment.baseURL1, '/backend/api/v2/events/agendadays', {'eventid':global.org_dash_signup_event_id,'organiserid':global.org_dash_signup_id,'Content-Type':'application/json', 'authorization':'Bearer '+global.org_dash_signup_etoken, 'buildversion':process.env.buildversion},'post', org_dash_create_agenda_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(200);
            expect(response.body.message).to.equal(Responsemessages.Parameter_sessions_agenda_post_successfully_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Verify the registered org is present on the super admin and verify the response: GET /backend/api/v1/organisations', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations', {'Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'get')
        if (response.status == 200)
        {

            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            assert.exists(response.body.data.organisationData, global.org_dash_signup_id);
            assert.exists(response.body.data.organisationData, global.org_dash_signup_user_role_id);
            assert.exists(response.body.data.organisationData, global.org_dash_signup_user_email);
            assert.exists(response.body.data.organisationData, global.org_dash_signup_first_name);
            assert.exists(response.body.data.organisationData, global.org_dash_signup_last_name);
            assert.exists(response.body.data.organisationData, global.org_dash_signup_last_organisation);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Verify the registered org is present on the admin dashboard and verify the response: GET /backend/api/v1/organisations', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken, 'buildversion':'1.2'},'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            assert.exists(response.body.data.organisationData, global.org_dash_signup_id);
            assert.exists(response.body.data.organisationData, global.org_dash_signup_user_role_id);
            assert.exists(response.body.data.organisationData, global.org_dash_signup_user_email);
            assert.exists(response.body.data.organisationData, global.org_dash_signup_first_name);
            assert.exists(response.body.data.organisationData, global.org_dash_signup_last_name);
            assert.exists(response.body.data.organisationData, global.org_dash_signup_last_organisation);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Verify the Admin Dashboard user is able to write the Signed up Organiser Profile and verify the response: PUT /backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', async () => 
    {
        const   put_signup_org_body = 
        {
            "data": {
                "first_name": global.org_dash_signup_first_name,
                "last_name": global.org_dash_signup_last_name,
                "organisation": global.org_dash_signup_last_organisation
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', {'Content-Type':'application/json', 'Accept':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken, 'buildversion':'1.2'},'put', put_signup_org_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser All permission:true - Super Admin updated the added Admin Dashboard role and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 1,
                    "code": "A-O-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 2,
                    "code": "A-O-ORGANISER_PROFILE",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 3,
                    "code": "A-O-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 4,
                    "code": "A-O-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 5,
                    "code": "A-O-ORGANISER_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 6,
                    "code": "A-O-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {

            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(1);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(2);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(3);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(4);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(5);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(6);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
 
            expect(response.body.data.permissions[6].permissionId).to.equal(7);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[7].permissionId).to.equal(8);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(9);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[9].permissionId).to.equal(10);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[10].permissionId).to.equal(11);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[11].permissionId).to.equal(12);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[12].permissionId).to.equal(13);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[13].permissionId).to.equal(14);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[14].permissionId).to.equal(15);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[15].permissionId).to.equal(16);
            expect(response.body.data.permissions[15].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[15].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[16].permissionId).to.equal(17);
            expect(response.body.data.permissions[16].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[16].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[17].permissionId).to.equal(18);
            expect(response.body.data.permissions[17].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[17].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[17].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[18].permissionId).to.equal(19);
            expect(response.body.data.permissions[18].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[18].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[18].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[19].permissionId).to.equal(20);
            expect(response.body.data.permissions[19].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[19].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[19].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[20].permissionId).to.equal(21);
            expect(response.body.data.permissions[20].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[20].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[20].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser All permission:true - Make the admin dashboard user login again and store the etoken to validate the changes: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser All permission, Profile[Write]:true - Verify the Admin Dashboard user is able to write and verify the response: PUT /backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', async () => 
    {
        const   put_signup_org_body = 
        {
            "data": {
                "first_name": global.org_dash_signup_first_name,
                "last_name": global.org_dash_signup_last_name,
                "organisation": global.org_dash_signup_last_organisation
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', {'Content-Type':'application/json', 'Accept':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken, 'buildversion':'1.2'},'put', put_signup_org_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser All permission, Profile[Read]:true - Verify the Admin Dashboard user is able to read and verify the response: GET /backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'get')
        if (response.status == 200)
        {
           expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
           expect(response.body.data.organisation).to.equal(global.org_dash_signup_last_organisation);
           expect(response.body.data.first_name).to.equal(global.org_dash_signup_first_name);
           expect(response.body.data.last_name).to.equal(global.org_dash_signup_last_name);
           expect(response.body.data.email).to.equal(global.org_dash_signup_user_email);
        }
        else
        {
            console.log("The failed response is:", response)
        }
    })

    it.only('Organiser All permission, Features & Pricing[Write]:true - Verify the Admin Dashboard user is able to write and verify the response: PUT /backend/api/v1/organisations/'+global.org_dash_signup_id+'/pricing', async () => 
    {
        const   put_Features_n_Pricing_org_body = 
        {
            "data": {
                "organiser_wise_features": [
                    {
                        "organiser_feature_meta_id": 1,
                        "price": 0,
                        "price_per_event": 0,
                        "feature_name": "Multi Event",
                        "is_show": false,
                        "feature_package_licence_date_id": 1
                    }
                ],
                "event_wise_features": [
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 2,
                        "price": 0,
                        "event_feature_meta_id": 1
                    },
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 4,
                        "price": 0,
                        "event_feature_meta_id": 2
                    },
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 8,
                        "price": 0,
                        "event_feature_meta_id": 3
                    },
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 9,
                        "price": 0,
                        "event_feature_meta_id": 4
                    },
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 14,
                        "price": 0,
                        "event_feature_meta_id": 2
                    }
                ]
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/pricing', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'put', put_Features_n_Pricing_org_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser All permission, Features & Pricing[Read]:true - Verify the Admin Dashboard user is able to read and verify the response: GET /backend/api/v1/organisations/'+global.org_dash_signup_id+'/pricing', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/pricing', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.organiser_wise_features[0].feature_package_licence_date_id).to.equal(1);
            expect(response.body.data.organiser_wise_features[0].is_show).to.equal(0);
            expect(response.body.data.organiser_wise_features[0].feature_name).to.equal(Responsemessages.parameter_Multi_Event_as_value);
            expect(response.body.data.organiser_wise_features[0].price_per_event).to.equal(0);
            expect(response.body.data.organiser_wise_features[0].price).to.equal(0);
            expect(response.body.data.organiser_wise_features[0].organiser_feature_meta_id).to.equal(1);
            expect(response.body.data.organiser_wise_features[0].name).to.equal(Responsemessages.parameter_Multi_Event_App_as_value);
            expect(response.body.data.organiser_wise_features[0].icon).to.equal(Responsemessages.parameter_App_2_gray_svg_as_value);
            expect(response.body.data.organiser_wise_features[0].hover_icon).to.equal(Responsemessages.parameter_App_2_svg_as_value);

            expect(response.body.data.licence_date_list[0].id).to.equal(1);
            expect(response.body.data.licence_date_list[0].name).to.equal(Responsemessages.parameter_1_Year_as_value);

            expect(response.body.data.licence_date_list[1].id).to.equal(2);
            expect(response.body.data.licence_date_list[1].name).to.equal(Responsemessages.parameter_2_Years_as_value);

            expect(response.body.data.licence_date_list[2].id).to.equal(3);
            expect(response.body.data.licence_date_list[2].name).to.equal(Responsemessages.parameter_3_Years_as_value);
        }
        else
        {
            console.log("The failed response is:", response)
        }
    })

    it.only('Organiser All permission, FEES_AND_COMMISSIONS[Write]:true - Verify the Admin Dashboard user is able to write and verify the response: PUT /api/v1/organisations/'+global.org_dash_signup_id+'/fees', async () => 
    {
        const   put_Features_n_Pricing_org_body = 
        {
            "data": {
                "absorb_stripe": 0,
                "pass_stripe": 0,
                "stripe_per_ticket": 0
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/fees', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'put', put_Features_n_Pricing_org_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser All permission, FEES_AND_COMMISSIONS[Read]:true - Verify the Admin Dashboard user is able to read and verify the response: GET /api/v1/organisations/'+global.org_dash_signup_id+'/fees', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/fees', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'get',)
        if (response.status == 200)
        {
           expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
           expect(response.body.data.absorb_stripe).to.equal(0);
           expect(response.body.data.pass_stripe).to.equal(0);
           expect(response.body.data.stripe_per_ticket).to.equal(0);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser All permission, ORGANISER_SETTINGS[Write]:true - Verify the Admin Dashboard user is able to write and verify the response: PUT /api/v1/organisations/'+global.org_dash_signup_id+'/settings', async () => 
    {
        const   put_Features_n_Pricing_org_body = 
        {
            "data": {
                "community_version": 2,
                "is_api_access_token": 0,
                "is_closed_caption_enabled": 0,
                "is_custom_theme": 0,
                "is_integration_embed_app": 0,
                "is_language_support": 0,
                "is_session_registration": 0,
                "is_sponsored_ads_support": 1,
                "is_sso_enabled": 0,
                "maximum_allowed_event_days": 0
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/settings', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'put', put_Features_n_Pricing_org_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser All permission, ORGANISER_SETTINGS[Read]:true - Verify the Admin Dashboard user is able to read and verify the response: GET /api/v1/organisations/'+global.org_dash_signup_id+'/settings', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/settings', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'get')
        if (response.status == 200)
        {
           expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
           expect(response.body.data.main_organiser_email).to.equal(global.org_dash_signup_user_email);
           expect(response.body.data.is_language_support).to.equal(0);
           expect(response.body.data.is_sponsored_ads_support).to.equal(1);
           expect(response.body.data.community_version).to.equal(2);
           expect(response.body.data.is_integration_embed_app).to.equal(0);
           expect(response.body.data.is_api_access_token).to.equal(0);
           expect(response.body.data.is_closed_caption_enabled).to.equal(0);
           expect(response.body.data.is_custom_theme).to.equal(0);
           expect(response.body.data.is_team_member).to.equal(0);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Event Settings[Write]: true - Verify the Admin Dashboard user is able to write and verify the response: PUT /backend/api/v1/events/event_id/info', async () => 
    {
        const   admin_dash_user_update_event_settings_body = 
        {
            "data": {
                "timezone_id": 1,
                "platform_template_id": null,
                "is_powered_by": 1,
                "type": "VIRTUAL",
                "opt_phy_meet": 0,
                "canHidePoweredBy": false,
                "is_linked_notification": 0,
                "start_time": global.org_dash_created_event_start_date__splitted+" 0:0",
                "end_time": global.org_dash_created_event_end_date__splitted+" 0:0",
                "is_cep_enabled": 0,
                "is_networking_lounge": 1,
                "is_webapp_multiskin_support": 1,
                "is_support_pre_recorded_live": 1,
                "is_product_tour": 1,
                "is_support_room_recording": "YES",
                "max_lounge_tables": 20,
                "is_exhibitor_table": "YES",
                "max_exhibitor_meetings": 100,
                "is_zoom_token": 1,
                "zoom_token": environment.third_Party_Zoom_Integration_key,
                "adminAttendeeTableCapacityOptions": "2,4,8",
                "adminExhibitorTableCapacityOptions": "2,4,8",
                "adminSponsorTableCapacityOptions": "2,4",
                "adminLoungeVideoProvider": "AGORA",
                "adminMeetingProvider": "AGORA",
                "community_version": 2,
                "is_sponsor_table": "NO",
                "max_sponsor_meetings": 100,
                "is_single_device_login": 0,
                "is_zoom_popup": 0,
                "networking_slot_duration": 15,
                "is_new_exhibitor_list": 1,
                "is_exhibitor_central": 0,
                "exhibitor_product_image_label": "Product/Services",
                "sponsor_product_image_label": "Product/Services",
                "is_new_agenda_list": "YES",
                "is_mux": 1,
                "showMeetingFeedback": "YES",
                "showLoungeFeedback": "YES",
                "showRoomFeedback": "NO"
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/info', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', admin_dash_user_update_event_settings_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Event Settings[Read]: true - Verify the Admin Dashboard user is able to read and verify the response: GET /backend/api/v1/organisations/org_id/events/event_id/settings', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/settings', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.id).to.equal(global.org_dash_signup_event_id);
            expect(response.body.data.name).to.equal(global.org_dash_created_event_name);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Fees & Commissions[Write]: true - Verify the Admin Dashboard user is able to write and verify the response: PUT /backend/api/v1/events/event_id/fees', async () => 
    {
        absorb_razorpay_value = 2.5;
        pass_razorpay_value = 2.5641;
        razorpay_per_ticket_value = 0;
        absorb_stripe_value = 4.5;
        pass_stripe_value = 4.712;
        stripe_per_ticket_value = 1;
        const   admin_dash_user_update_Commissions_body = 
        {
            "data": {
                "absorb_razorpay": absorb_razorpay_value,
                "pass_razorpay": pass_razorpay_value,
                "razorpay_per_ticket": razorpay_per_ticket_value,
                "absorb_stripe": absorb_stripe_value,
                "pass_stripe": pass_stripe_value,
                "stripe_per_ticket": stripe_per_ticket_value
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/fees', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', admin_dash_user_update_Commissions_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Fees & Commissions[Read]: true - Verify the Admin Dashboard user is able to read and verify the response: GET /backend/api/v1/events/event_id/fees', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/fees', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);

            expect(response.body.data.absorb_razorpay).to.equal(absorb_razorpay_value);
            expect(response.body.data.pass_razorpay).to.equal(pass_razorpay_value);
            expect(response.body.data.razorpay_per_ticket).to.equal(razorpay_per_ticket_value);
            expect(response.body.data.absorb_stripe).to.equal(absorb_stripe_value);
            expect(response.body.data.pass_stripe).to.equal(pass_stripe_value);
            expect(response.body.data.stripe_per_ticket).to.equal(stripe_per_ticket_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Ticketing Transfer[Read]: true - Added and store certain response data.: GET /backend/api/v1/events/event_id/transfers', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Ticketing Transfer[Read]: true - Fetch and assert certain response data.: GET /backend/api/v1/events/currencies', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/currencies', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);

            expect(response.body.data[0].id).to.equal(1);
            expect(response.body.data[0].name).to.equal("Rupees");
            expect(response.body.data[0].currency).to.equal("INR");
            expect(response.body.data[0].country).to.equal("India");
            expect(response.body.data[0].currency_unicode).to.equal("₹");
            expect(response.body.data[0].razorpay_support).to.equal(1);
            expect(response.body.data[0].stripe_support).to.equal(1);
            expect(response.body.data[0].paypal_support).to.equal(0);
            expect(response.body.data[0].transfer_support).to.equal(0);
            expect(response.body.data[0].position).to.equal(11);

            expect(response.body.data[1].id).to.equal(2);
            expect(response.body.data[1].name).to.equal("Dollars");
            expect(response.body.data[1].currency).to.equal("USD");
            expect(response.body.data[1].country).to.equal("United States of America");
            expect(response.body.data[1].currency_unicode).to.equal("$");
            expect(response.body.data[1].razorpay_support).to.equal(0);
            expect(response.body.data[1].stripe_support).to.equal(1);
            expect(response.body.data[1].paypal_support).to.equal(0);
            expect(response.body.data[1].transfer_support).to.equal(1);
            expect(response.body.data[1].position).to.equal(24);

            expect(response.body.data[2].id).to.equal(125);
            expect(response.body.data[2].name).to.equal("Australian Dollar");
            expect(response.body.data[2].currency).to.equal("AUD");
            expect(response.body.data[2].country).to.equal("Australia");
            expect(response.body.data[2].currency_unicode).to.equal("A$");
            expect(response.body.data[2].razorpay_support).to.equal(0);
            expect(response.body.data[2].stripe_support).to.equal(1);
            expect(response.body.data[2].paypal_support).to.equal(0);
            expect(response.body.data[2].transfer_support).to.equal(1);
            expect(response.body.data[2].position).to.equal(1);

            expect(response.body.data[3].id).to.equal(128);
            expect(response.body.data[3].name).to.equal("Canadian Dollar");
            expect(response.body.data[3].currency).to.equal("CAD");
            expect(response.body.data[3].country).to.equal("Canada");
            expect(response.body.data[3].currency_unicode).to.equal("C$");
            expect(response.body.data[3].razorpay_support).to.equal(0);
            expect(response.body.data[3].stripe_support).to.equal(1);
            expect(response.body.data[3].paypal_support).to.equal(0);
            expect(response.body.data[3].transfer_support).to.equal(0);
            expect(response.body.data[3].position).to.equal(4);

            expect(response.body.data[4].id).to.equal(129);
            expect(response.body.data[4].name).to.equal("krone");
            expect(response.body.data[4].currency).to.equal("DKK");
            expect(response.body.data[4].country).to.equal("Denmark");
            expect(response.body.data[4].currency_unicode).to.equal("Kr");
            expect(response.body.data[4].razorpay_support).to.equal(0);
            expect(response.body.data[4].stripe_support).to.equal(1);
            expect(response.body.data[4].paypal_support).to.equal(0);
            expect(response.body.data[4].transfer_support).to.equal(0);
            expect(response.body.data[4].position).to.equal(5);

            expect(response.body.data[5].id).to.equal(131);
            expect(response.body.data[5].name).to.equal("Euro");
            expect(response.body.data[5].currency).to.equal("EUR");
            expect(response.body.data[5].country).to.equal("Europe");
            expect(response.body.data[5].currency_unicode).to.equal("€");
            expect(response.body.data[5].razorpay_support).to.equal(0);
            expect(response.body.data[5].stripe_support).to.equal(1);
            expect(response.body.data[5].paypal_support).to.equal(0);
            expect(response.body.data[5].transfer_support).to.equal(0);
            expect(response.body.data[5].position).to.equal(7);

            expect(response.body.data[6].id).to.equal(133);
            expect(response.body.data[6].name).to.equal("Hong Kong Dollar");
            expect(response.body.data[6].currency).to.equal("HKD");
            expect(response.body.data[6].country).to.equal("Hong Kong");
            expect(response.body.data[6].currency_unicode).to.equal("HK$");
            expect(response.body.data[6].razorpay_support).to.equal(0);
            expect(response.body.data[6].stripe_support).to.equal(1);
            expect(response.body.data[6].paypal_support).to.equal(0);
            expect(response.body.data[6].transfer_support).to.equal(0);
            expect(response.body.data[6].position).to.equal(9);

            expect(response.body.data[7].id).to.equal(136);
            expect(response.body.data[7].name).to.equal("Japanese Yen");
            expect(response.body.data[7].currency).to.equal("JPY");
            expect(response.body.data[7].country).to.equal("Japan");
            expect(response.body.data[7].currency_unicode).to.equal("¥");
            expect(response.body.data[7].razorpay_support).to.equal(0);
            expect(response.body.data[7].stripe_support).to.equal(0);
            expect(response.body.data[7].paypal_support).to.equal(0);
            expect(response.body.data[7].transfer_support).to.equal(0);
            expect(response.body.data[7].position).to.equal(13);

            expect(response.body.data[8].id).to.equal(139);
            expect(response.body.data[8].name).to.equal("New Zealand Dollars");
            expect(response.body.data[8].currency).to.equal("NZD");
            expect(response.body.data[8].country).to.equal("New Zealand");
            expect(response.body.data[8].currency_unicode).to.equal("NZ$");
            expect(response.body.data[8].razorpay_support).to.equal(0);
            expect(response.body.data[8].stripe_support).to.equal(1);
            expect(response.body.data[8].paypal_support).to.equal(0);
            expect(response.body.data[8].transfer_support).to.equal(0);
            expect(response.body.data[8].position).to.equal(16);

            expect(response.body.data[9].id).to.equal(140);
            expect(response.body.data[9].name).to.equal("Norwegian Krone");
            expect(response.body.data[9].currency).to.equal("NOK");
            expect(response.body.data[9].country).to.equal("Norway");
            expect(response.body.data[9].currency_unicode).to.equal("Kr");
            expect(response.body.data[9].razorpay_support).to.equal(0);
            expect(response.body.data[9].stripe_support).to.equal(1);
            expect(response.body.data[9].paypal_support).to.equal(0);
            expect(response.body.data[9].transfer_support).to.equal(0);
            expect(response.body.data[9].position).to.equal(17);

            expect(response.body.data[10].id).to.equal(142);
            expect(response.body.data[10].name).to.equal("Singapore Dollar");
            expect(response.body.data[10].currency).to.equal("SGD");
            expect(response.body.data[10].country).to.equal("Singapore");
            expect(response.body.data[10].currency_unicode).to.equal("S$");
            expect(response.body.data[10].razorpay_support).to.equal(0);
            expect(response.body.data[10].stripe_support).to.equal(1);
            expect(response.body.data[10].paypal_support).to.equal(0);
            expect(response.body.data[10].transfer_support).to.equal(0);
            expect(response.body.data[10].position).to.equal(19);

            expect(response.body.data[11].id).to.equal(144);
            expect(response.body.data[11].name).to.equal("Swedish Krona");
            expect(response.body.data[11].currency).to.equal("SEK");
            expect(response.body.data[11].country).to.equal("Sweden");
            expect(response.body.data[11].currency_unicode).to.equal("Kr");
            expect(response.body.data[11].razorpay_support).to.equal(0);
            expect(response.body.data[11].stripe_support).to.equal(1);
            expect(response.body.data[11].paypal_support).to.equal(0);
            expect(response.body.data[11].transfer_support).to.equal(0);
            expect(response.body.data[11].position).to.equal(21);

            expect(response.body.data[12].id).to.equal(145);
            expect(response.body.data[12].name).to.equal("Swiss Franc");
            expect(response.body.data[12].currency).to.equal("CHF");
            expect(response.body.data[12].country).to.equal("Switzerland");
            expect(response.body.data[12].currency_unicode).to.equal("Fr");
            expect(response.body.data[12].razorpay_support).to.equal(0);
            expect(response.body.data[12].stripe_support).to.equal(1);
            expect(response.body.data[12].paypal_support).to.equal(0);
            expect(response.body.data[12].transfer_support).to.equal(0);
            expect(response.body.data[12].position).to.equal(22);

            expect(response.body.data[13].id).to.equal(146);
            expect(response.body.data[13].name).to.equal("Pound Sterling");
            expect(response.body.data[13].currency).to.equal("GBP");
            expect(response.body.data[13].country).to.equal("United Kingdom");
            expect(response.body.data[13].currency_unicode).to.equal("£");
            expect(response.body.data[13].razorpay_support).to.equal(0);
            expect(response.body.data[13].stripe_support).to.equal(1);
            expect(response.body.data[13].paypal_support).to.equal(1);
            expect(response.body.data[13].transfer_support).to.equal(0);
            expect(response.body.data[13].position).to.equal(23);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Ticketing Transfer[Write]: true - Added and store certain response data.: POST /backend/api/v1/events/event_id/transfers', async () => 
    {
        var today = new Date();
        var dd = String(today.getDate()).padStart(1, '0');
        var mm = String(today.getMonth() + 1).padStart(1, '0'); //January is 0!
        var yyyy = today.getFullYear();

        today = yyyy + '-' + mm + '-' + dd;

        global.today;

        transaction_id_value = "ABCD1234";

        const   admin_dash_user_add_ticketing_transfer_body = 
        {
            "data": {
                "currency_id": 1,
                "transfer_date": today,
                "amount": "100",
                "transaction_id": transaction_id_value
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_ticketing_transfer_body)
        if (response.status == 200)
        {
            global.admin_dash_added_ticket_transfer_ids = response.body.data.ids;
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Ticketing Transfer[Read]: true - Added and store certain response data.: GET /backend/api/v1/events/event_id/transfers', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data[0].id).to.equal(global.admin_dash_added_ticket_transfer_ids);
            expect(response.body.data[0].event_id).to.equal(global.org_dash_signup_event_id);
            expect(response.body.data[0].transaction_id).to.equal(transaction_id_value);
            expect(response.body.data[0].amount).to.equal(100);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Ticketing Transfer[Read]: true - Fetch and assert certain response data.: GET /backend/api/v1/events/currencies', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/currencies', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);

            expect(response.body.data[0].id).to.equal(1);
            expect(response.body.data[0].name).to.equal("Rupees");
            expect(response.body.data[0].currency).to.equal("INR");
            expect(response.body.data[0].country).to.equal("India");
            expect(response.body.data[0].currency_unicode).to.equal("₹");
            expect(response.body.data[0].razorpay_support).to.equal(1);
            expect(response.body.data[0].stripe_support).to.equal(1);
            expect(response.body.data[0].paypal_support).to.equal(0);
            expect(response.body.data[0].transfer_support).to.equal(0);
            expect(response.body.data[0].position).to.equal(11);

            expect(response.body.data[1].id).to.equal(2);
            expect(response.body.data[1].name).to.equal("Dollars");
            expect(response.body.data[1].currency).to.equal("USD");
            expect(response.body.data[1].country).to.equal("United States of America");
            expect(response.body.data[1].currency_unicode).to.equal("$");
            expect(response.body.data[1].razorpay_support).to.equal(0);
            expect(response.body.data[1].stripe_support).to.equal(1);
            expect(response.body.data[1].paypal_support).to.equal(0);
            expect(response.body.data[1].transfer_support).to.equal(1);
            expect(response.body.data[1].position).to.equal(24);

            expect(response.body.data[2].id).to.equal(125);
            expect(response.body.data[2].name).to.equal("Australian Dollar");
            expect(response.body.data[2].currency).to.equal("AUD");
            expect(response.body.data[2].country).to.equal("Australia");
            expect(response.body.data[2].currency_unicode).to.equal("A$");
            expect(response.body.data[2].razorpay_support).to.equal(0);
            expect(response.body.data[2].stripe_support).to.equal(1);
            expect(response.body.data[2].paypal_support).to.equal(0);
            expect(response.body.data[2].transfer_support).to.equal(1);
            expect(response.body.data[2].position).to.equal(1);

            expect(response.body.data[3].id).to.equal(128);
            expect(response.body.data[3].name).to.equal("Canadian Dollar");
            expect(response.body.data[3].currency).to.equal("CAD");
            expect(response.body.data[3].country).to.equal("Canada");
            expect(response.body.data[3].currency_unicode).to.equal("C$");
            expect(response.body.data[3].razorpay_support).to.equal(0);
            expect(response.body.data[3].stripe_support).to.equal(1);
            expect(response.body.data[3].paypal_support).to.equal(0);
            expect(response.body.data[3].transfer_support).to.equal(0);
            expect(response.body.data[3].position).to.equal(4);

            expect(response.body.data[4].id).to.equal(129);
            expect(response.body.data[4].name).to.equal("krone");
            expect(response.body.data[4].currency).to.equal("DKK");
            expect(response.body.data[4].country).to.equal("Denmark");
            expect(response.body.data[4].currency_unicode).to.equal("Kr");
            expect(response.body.data[4].razorpay_support).to.equal(0);
            expect(response.body.data[4].stripe_support).to.equal(1);
            expect(response.body.data[4].paypal_support).to.equal(0);
            expect(response.body.data[4].transfer_support).to.equal(0);
            expect(response.body.data[4].position).to.equal(5);

            expect(response.body.data[5].id).to.equal(131);
            expect(response.body.data[5].name).to.equal("Euro");
            expect(response.body.data[5].currency).to.equal("EUR");
            expect(response.body.data[5].country).to.equal("Europe");
            expect(response.body.data[5].currency_unicode).to.equal("€");
            expect(response.body.data[5].razorpay_support).to.equal(0);
            expect(response.body.data[5].stripe_support).to.equal(1);
            expect(response.body.data[5].paypal_support).to.equal(0);
            expect(response.body.data[5].transfer_support).to.equal(0);
            expect(response.body.data[5].position).to.equal(7);

            expect(response.body.data[6].id).to.equal(133);
            expect(response.body.data[6].name).to.equal("Hong Kong Dollar");
            expect(response.body.data[6].currency).to.equal("HKD");
            expect(response.body.data[6].country).to.equal("Hong Kong");
            expect(response.body.data[6].currency_unicode).to.equal("HK$");
            expect(response.body.data[6].razorpay_support).to.equal(0);
            expect(response.body.data[6].stripe_support).to.equal(1);
            expect(response.body.data[6].paypal_support).to.equal(0);
            expect(response.body.data[6].transfer_support).to.equal(0);
            expect(response.body.data[6].position).to.equal(9);

            expect(response.body.data[7].id).to.equal(136);
            expect(response.body.data[7].name).to.equal("Japanese Yen");
            expect(response.body.data[7].currency).to.equal("JPY");
            expect(response.body.data[7].country).to.equal("Japan");
            expect(response.body.data[7].currency_unicode).to.equal("¥");
            expect(response.body.data[7].razorpay_support).to.equal(0);
            expect(response.body.data[7].stripe_support).to.equal(0);
            expect(response.body.data[7].paypal_support).to.equal(0);
            expect(response.body.data[7].transfer_support).to.equal(0);
            expect(response.body.data[7].position).to.equal(13);

            expect(response.body.data[8].id).to.equal(139);
            expect(response.body.data[8].name).to.equal("New Zealand Dollars");
            expect(response.body.data[8].currency).to.equal("NZD");
            expect(response.body.data[8].country).to.equal("New Zealand");
            expect(response.body.data[8].currency_unicode).to.equal("NZ$");
            expect(response.body.data[8].razorpay_support).to.equal(0);
            expect(response.body.data[8].stripe_support).to.equal(1);
            expect(response.body.data[8].paypal_support).to.equal(0);
            expect(response.body.data[8].transfer_support).to.equal(0);
            expect(response.body.data[8].position).to.equal(16);

            expect(response.body.data[9].id).to.equal(140);
            expect(response.body.data[9].name).to.equal("Norwegian Krone");
            expect(response.body.data[9].currency).to.equal("NOK");
            expect(response.body.data[9].country).to.equal("Norway");
            expect(response.body.data[9].currency_unicode).to.equal("Kr");
            expect(response.body.data[9].razorpay_support).to.equal(0);
            expect(response.body.data[9].stripe_support).to.equal(1);
            expect(response.body.data[9].paypal_support).to.equal(0);
            expect(response.body.data[9].transfer_support).to.equal(0);
            expect(response.body.data[9].position).to.equal(17);

            expect(response.body.data[10].id).to.equal(142);
            expect(response.body.data[10].name).to.equal("Singapore Dollar");
            expect(response.body.data[10].currency).to.equal("SGD");
            expect(response.body.data[10].country).to.equal("Singapore");
            expect(response.body.data[10].currency_unicode).to.equal("S$");
            expect(response.body.data[10].razorpay_support).to.equal(0);
            expect(response.body.data[10].stripe_support).to.equal(1);
            expect(response.body.data[10].paypal_support).to.equal(0);
            expect(response.body.data[10].transfer_support).to.equal(0);
            expect(response.body.data[10].position).to.equal(19);

            expect(response.body.data[11].id).to.equal(144);
            expect(response.body.data[11].name).to.equal("Swedish Krona");
            expect(response.body.data[11].currency).to.equal("SEK");
            expect(response.body.data[11].country).to.equal("Sweden");
            expect(response.body.data[11].currency_unicode).to.equal("Kr");
            expect(response.body.data[11].razorpay_support).to.equal(0);
            expect(response.body.data[11].stripe_support).to.equal(1);
            expect(response.body.data[11].paypal_support).to.equal(0);
            expect(response.body.data[11].transfer_support).to.equal(0);
            expect(response.body.data[11].position).to.equal(21);

            expect(response.body.data[12].id).to.equal(145);
            expect(response.body.data[12].name).to.equal("Swiss Franc");
            expect(response.body.data[12].currency).to.equal("CHF");
            expect(response.body.data[12].country).to.equal("Switzerland");
            expect(response.body.data[12].currency_unicode).to.equal("Fr");
            expect(response.body.data[12].razorpay_support).to.equal(0);
            expect(response.body.data[12].stripe_support).to.equal(1);
            expect(response.body.data[12].paypal_support).to.equal(0);
            expect(response.body.data[12].transfer_support).to.equal(0);
            expect(response.body.data[12].position).to.equal(22);

            expect(response.body.data[13].id).to.equal(146);
            expect(response.body.data[13].name).to.equal("Pound Sterling");
            expect(response.body.data[13].currency).to.equal("GBP");
            expect(response.body.data[13].country).to.equal("United Kingdom");
            expect(response.body.data[13].currency_unicode).to.equal("£");
            expect(response.body.data[13].razorpay_support).to.equal(0);
            expect(response.body.data[13].stripe_support).to.equal(1);
            expect(response.body.data[13].paypal_support).to.equal(1);
            expect(response.body.data[13].transfer_support).to.equal(0);
            expect(response.body.data[13].position).to.equal(23);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Ticketing Transfer[Delete]: true - Deleting and validating the response message.: DELETE /backend/api/v1/events/event_id/transfers', async () => 
    {
        const   admin_dash_user_add_ticketing_transfer_body = 
        {
            "data": {
                "transfer_id": global.admin_dash_added_ticket_transfer_ids
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'delete', admin_dash_user_add_ticketing_transfer_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Ticketing Transfer[Read]: true - Added and store certain response data.: GET /backend/api/v1/events/event_id/transfers', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Ticketing Transfer[Read]: true - Fetch and assert certain response data.: GET /backend/api/v1/events/currencies', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/currencies', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);

            expect(response.body.data[0].id).to.equal(1);
            expect(response.body.data[0].name).to.equal("Rupees");
            expect(response.body.data[0].currency).to.equal("INR");
            expect(response.body.data[0].country).to.equal("India");
            expect(response.body.data[0].currency_unicode).to.equal("₹");
            expect(response.body.data[0].razorpay_support).to.equal(1);
            expect(response.body.data[0].stripe_support).to.equal(1);
            expect(response.body.data[0].paypal_support).to.equal(0);
            expect(response.body.data[0].transfer_support).to.equal(0);
            expect(response.body.data[0].position).to.equal(11);

            expect(response.body.data[1].id).to.equal(2);
            expect(response.body.data[1].name).to.equal("Dollars");
            expect(response.body.data[1].currency).to.equal("USD");
            expect(response.body.data[1].country).to.equal("United States of America");
            expect(response.body.data[1].currency_unicode).to.equal("$");
            expect(response.body.data[1].razorpay_support).to.equal(0);
            expect(response.body.data[1].stripe_support).to.equal(1);
            expect(response.body.data[1].paypal_support).to.equal(0);
            expect(response.body.data[1].transfer_support).to.equal(1);
            expect(response.body.data[1].position).to.equal(24);

            expect(response.body.data[2].id).to.equal(125);
            expect(response.body.data[2].name).to.equal("Australian Dollar");
            expect(response.body.data[2].currency).to.equal("AUD");
            expect(response.body.data[2].country).to.equal("Australia");
            expect(response.body.data[2].currency_unicode).to.equal("A$");
            expect(response.body.data[2].razorpay_support).to.equal(0);
            expect(response.body.data[2].stripe_support).to.equal(1);
            expect(response.body.data[2].paypal_support).to.equal(0);
            expect(response.body.data[2].transfer_support).to.equal(1);
            expect(response.body.data[2].position).to.equal(1);

            expect(response.body.data[3].id).to.equal(128);
            expect(response.body.data[3].name).to.equal("Canadian Dollar");
            expect(response.body.data[3].currency).to.equal("CAD");
            expect(response.body.data[3].country).to.equal("Canada");
            expect(response.body.data[3].currency_unicode).to.equal("C$");
            expect(response.body.data[3].razorpay_support).to.equal(0);
            expect(response.body.data[3].stripe_support).to.equal(1);
            expect(response.body.data[3].paypal_support).to.equal(0);
            expect(response.body.data[3].transfer_support).to.equal(0);
            expect(response.body.data[3].position).to.equal(4);

            expect(response.body.data[4].id).to.equal(129);
            expect(response.body.data[4].name).to.equal("krone");
            expect(response.body.data[4].currency).to.equal("DKK");
            expect(response.body.data[4].country).to.equal("Denmark");
            expect(response.body.data[4].currency_unicode).to.equal("Kr");
            expect(response.body.data[4].razorpay_support).to.equal(0);
            expect(response.body.data[4].stripe_support).to.equal(1);
            expect(response.body.data[4].paypal_support).to.equal(0);
            expect(response.body.data[4].transfer_support).to.equal(0);
            expect(response.body.data[4].position).to.equal(5);

            expect(response.body.data[5].id).to.equal(131);
            expect(response.body.data[5].name).to.equal("Euro");
            expect(response.body.data[5].currency).to.equal("EUR");
            expect(response.body.data[5].country).to.equal("Europe");
            expect(response.body.data[5].currency_unicode).to.equal("€");
            expect(response.body.data[5].razorpay_support).to.equal(0);
            expect(response.body.data[5].stripe_support).to.equal(1);
            expect(response.body.data[5].paypal_support).to.equal(0);
            expect(response.body.data[5].transfer_support).to.equal(0);
            expect(response.body.data[5].position).to.equal(7);

            expect(response.body.data[6].id).to.equal(133);
            expect(response.body.data[6].name).to.equal("Hong Kong Dollar");
            expect(response.body.data[6].currency).to.equal("HKD");
            expect(response.body.data[6].country).to.equal("Hong Kong");
            expect(response.body.data[6].currency_unicode).to.equal("HK$");
            expect(response.body.data[6].razorpay_support).to.equal(0);
            expect(response.body.data[6].stripe_support).to.equal(1);
            expect(response.body.data[6].paypal_support).to.equal(0);
            expect(response.body.data[6].transfer_support).to.equal(0);
            expect(response.body.data[6].position).to.equal(9);

            expect(response.body.data[7].id).to.equal(136);
            expect(response.body.data[7].name).to.equal("Japanese Yen");
            expect(response.body.data[7].currency).to.equal("JPY");
            expect(response.body.data[7].country).to.equal("Japan");
            expect(response.body.data[7].currency_unicode).to.equal("¥");
            expect(response.body.data[7].razorpay_support).to.equal(0);
            expect(response.body.data[7].stripe_support).to.equal(0);
            expect(response.body.data[7].paypal_support).to.equal(0);
            expect(response.body.data[7].transfer_support).to.equal(0);
            expect(response.body.data[7].position).to.equal(13);

            expect(response.body.data[8].id).to.equal(139);
            expect(response.body.data[8].name).to.equal("New Zealand Dollars");
            expect(response.body.data[8].currency).to.equal("NZD");
            expect(response.body.data[8].country).to.equal("New Zealand");
            expect(response.body.data[8].currency_unicode).to.equal("NZ$");
            expect(response.body.data[8].razorpay_support).to.equal(0);
            expect(response.body.data[8].stripe_support).to.equal(1);
            expect(response.body.data[8].paypal_support).to.equal(0);
            expect(response.body.data[8].transfer_support).to.equal(0);
            expect(response.body.data[8].position).to.equal(16);

            expect(response.body.data[9].id).to.equal(140);
            expect(response.body.data[9].name).to.equal("Norwegian Krone");
            expect(response.body.data[9].currency).to.equal("NOK");
            expect(response.body.data[9].country).to.equal("Norway");
            expect(response.body.data[9].currency_unicode).to.equal("Kr");
            expect(response.body.data[9].razorpay_support).to.equal(0);
            expect(response.body.data[9].stripe_support).to.equal(1);
            expect(response.body.data[9].paypal_support).to.equal(0);
            expect(response.body.data[9].transfer_support).to.equal(0);
            expect(response.body.data[9].position).to.equal(17);

            expect(response.body.data[10].id).to.equal(142);
            expect(response.body.data[10].name).to.equal("Singapore Dollar");
            expect(response.body.data[10].currency).to.equal("SGD");
            expect(response.body.data[10].country).to.equal("Singapore");
            expect(response.body.data[10].currency_unicode).to.equal("S$");
            expect(response.body.data[10].razorpay_support).to.equal(0);
            expect(response.body.data[10].stripe_support).to.equal(1);
            expect(response.body.data[10].paypal_support).to.equal(0);
            expect(response.body.data[10].transfer_support).to.equal(0);
            expect(response.body.data[10].position).to.equal(19);

            expect(response.body.data[11].id).to.equal(144);
            expect(response.body.data[11].name).to.equal("Swedish Krona");
            expect(response.body.data[11].currency).to.equal("SEK");
            expect(response.body.data[11].country).to.equal("Sweden");
            expect(response.body.data[11].currency_unicode).to.equal("Kr");
            expect(response.body.data[11].razorpay_support).to.equal(0);
            expect(response.body.data[11].stripe_support).to.equal(1);
            expect(response.body.data[11].paypal_support).to.equal(0);
            expect(response.body.data[11].transfer_support).to.equal(0);
            expect(response.body.data[11].position).to.equal(21);

            expect(response.body.data[12].id).to.equal(145);
            expect(response.body.data[12].name).to.equal("Swiss Franc");
            expect(response.body.data[12].currency).to.equal("CHF");
            expect(response.body.data[12].country).to.equal("Switzerland");
            expect(response.body.data[12].currency_unicode).to.equal("Fr");
            expect(response.body.data[12].razorpay_support).to.equal(0);
            expect(response.body.data[12].stripe_support).to.equal(1);
            expect(response.body.data[12].paypal_support).to.equal(0);
            expect(response.body.data[12].transfer_support).to.equal(0);
            expect(response.body.data[12].position).to.equal(22);

            expect(response.body.data[13].id).to.equal(146);
            expect(response.body.data[13].name).to.equal("Pound Sterling");
            expect(response.body.data[13].currency).to.equal("GBP");
            expect(response.body.data[13].country).to.equal("United Kingdom");
            expect(response.body.data[13].currency_unicode).to.equal("£");
            expect(response.body.data[13].razorpay_support).to.equal(0);
            expect(response.body.data[13].stripe_support).to.equal(1);
            expect(response.body.data[13].paypal_support).to.equal(1);
            expect(response.body.data[13].transfer_support).to.equal(0);
            expect(response.body.data[13].position).to.equal(23);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Features & Pricing[Write]: true - Write and validating the response message.: PUT /backend/api/v1/organisations/org_id/events/event_id/pricing', async () => 
    {
        const   admin_dash_user_Features_Pricing_body = 
        {
            "data": {
                "features": [
                    {
                        "id": 1,
                        "name": "Event Website",
                        "price": 0,
                        "icon": "website_gray.svg",
                        "hoverIcon": "website_icon.svg",
                        "licenceDateId": 1,
                        "isPaid": false,
                        "showGlobalPrice": 1,
                        "packagesCount": 2,
                        "packages": [
                            {
                                "id": 2,
                                "name": "Single Page",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            },
                            {
                                "id": 3,
                                "name": "Multiple Page",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            }
                        ],
                        "isSelected": false
                    },
                    {
                        "id": 2,
                        "name": "Event App",
                        "price": 0,
                        "icon": "App_2_gray.svg",
                        "hoverIcon": "App_2.svg",
                        "licenceDateId": 1,
                        "isPaid": false,
                        "showGlobalPrice": 0,
                        "packagesCount": 3,
                        "packages": [
                            {
                                "id": 4,
                                "name": "Branded App",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            },
                            {
                                "id": 5,
                                "name": "Multi Event App",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            },
                            {
                                "id": 14,
                                "name": "Hubilo App",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            }
                        ],
                        "isSelected": false
                    },
                    {
                        "id": 3,
                        "name": "Networking",
                        "price": 0,
                        "icon": "networking_icon_gray.svg",
                        "hoverIcon": "networking_icon.svg",
                        "licenceDateId": 1,
                        "isPaid": true,
                        "showGlobalPrice": 1,
                        "packagesCount": 1,
                        "packages": [
                            {
                                "id": 8,
                                "name": "Standard",
                                "licenceDateId": 1,
                                "isSelected": true,
                                "price": 0
                            }
                        ],
                        "isSelected": true
                    },
                    {
                        "id": 4,
                        "name": "Event Registration",
                        "price": 0,
                        "icon": "Reg_icon_gray.svg",
                        "hoverIcon": "Reg_icon.svg",
                        "licenceDateId": 1,
                        "isPaid": true,
                        "showGlobalPrice": 1,
                        "packagesCount": 1,
                        "packages": [
                            {
                                "id": 9,
                                "name": "Ticketing & Forms",
                                "licenceDateId": 1,
                                "isSelected": true,
                                "price": 0
                            }
                        ],
                        "isSelected": true
                    }
                ]
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/pricing', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', admin_dash_user_Features_Pricing_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Features & Pricing[Read]: true - Read and validating the response message.: GET /backend/api/v1/organisations/org_id/events/event_id/pricing', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/pricing', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.features[0].name).to.equal("Event Website");

            expect(response.body.data.features[1].name).to.equal("Event App");

            expect(response.body.data.features[2].name).to.equal("Networking");

            expect(response.body.data.features[3].name).to.equal("Event Registration");

            expect(response.body.data.licence_date_list[0].id).to.equal(1);
            expect(response.body.data.licence_date_list[0].name).to.equal(Responsemessages.parameter_1_Year_as_value);

            expect(response.body.data.licence_date_list[1].id).to.equal(2);
            expect(response.body.data.licence_date_list[1].name).to.equal(Responsemessages.parameter_2_Years_as_value);

            expect(response.body.data.licence_date_list[2].id).to.equal(3);
            expect(response.body.data.licence_date_list[2].name).to.equal(Responsemessages.parameter_3_Years_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Coupon Codes[Read]: true - Read and validating the response message.: GET /backend/api/v1/events/event_id/discount', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/discount', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);

            expect(response.body.data.organiserDiscountType[0].id).to.equal(1);
            expect(response.body.data.organiserDiscountType[0].name).to.equal("Percentage");

            expect(response.body.data.organiserDiscountType[1].id).to.equal(2);
            expect(response.body.data.organiserDiscountType[1].name).to.equal("Amount");

            expect(response.body.data.organiserDiscountValidityType[0].id).to.equal(1);
            expect(response.body.data.organiserDiscountValidityType[0].name).to.equal("Limited");

            expect(response.body.data.organiserDiscountValidityType[1].id).to.equal(2);
            expect(response.body.data.organiserDiscountValidityType[1].name).to.equal("Unlimited");
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Coupon Codes[Write]: true - Added and store certain response data.: POST /backend/api/v1/organisations/org_id/events/event_id/discount', async () => 
    {
        var today = new Date();
        var dd = String(today.getDate()).padStart(1, '0');
        var mm = String(today.getMonth() + 1).padStart(1, '0'); //January is 0!
        var yyyy = today.getFullYear();
        today = yyyy + '-' + mm + '-' + dd;
        global.today;
        coupon_code_name_value = casual.word

        const   admin_dash_user_add_Coupon_Codes_body = 
        {
            "data": {
                "organiser_id": global.org_dash_signup_id,
                "event_id": global.org_dash_signup_event_id,
                "coupon_code_name": coupon_code_name_value,
                "organiser_discount_type_id": 1,
                "organiser_discount_validity_type_id": 1,
                "value": 1,
                "maximum_value": 0,
                "number_of_uses": 1,
                "expire_time": global.today+" 12:0"
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/discount', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_Coupon_Codes_body)
        if (response.status == 200)
        {
            global.admin_dash_added_Coupon_Codes_ids = response.body.data.ids;
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Coupon Codes[Delete]: true - Deleting and validating the response message.: DELETE /backend/api/v1/organisations/org_id/events/event_id/discount/admin_dash_added_Coupon_Codes_ids', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/discount/'+global.admin_dash_added_Coupon_Codes_ids, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'delete')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.msg).to.equal(Responsemessages.parameter_Discount_deleted_successfully_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Webinar Hosts[Read]: true - Added and store certain response data.: GET /backend/api/v1/organisations/org_id/events/event_id/webinars', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.total_page).to.equal(0);
            expect(response.body.data.total_count).to.equal(0);
            expect(response.body.data.current_page).to.equal(1);
            expect(response.body).to.have.all.keys("status","data");
            expect(response.body.data).to.have.all.keys("webinar_host_data","current_page","total_count","total_page");
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Webinar Hosts[Write]: true - Added and store certain response data.: POST /backend/api/v1/organisations/org_id/events/event_id/webinars', async () => 
    {
        global.srinivas__email_id = "srinivas.kantipudi@hubilo.com";
        const   admin_dash_user_add_webinar_host_body = 
        {
            "data": {
                "attendees_count": 3000,
                "email": global.srinivas__email_id,
                "first_name": casual.first_name,
                "last_name": casual.last_name
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_webinar_host_body)
        if (response.status == 200)
        {
            global.third_Party_Zoom_Integration_ids = response.body.data.ids.webinar_host_id;
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Webinar Hosts[Delete]: true - Added and store certain response data.: DELETE /backend/api/v1/organisations/org_id/events/event_id/webinars/webinar_id', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars/'+global.third_Party_Zoom_Integration_ids, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'delete')
        if (response.status == 200)
        {
            expect(response.body.data).to.equal(Responsemessages.Parameter_Notifications_Delete_Dashboard);
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Webinar Hosts[Write]: true - Again adding and store certain response data.: POST /backend/api/v1/organisations/org_id/events/event_id/webinars', async () => 
    {
        global.srinivas__email_id = "srinivas.kantipudi@hubilo.com";
        global.srinivas_fname = casual.first_name;
        global.srinivas_lname = casual.last_name;
        const   admin_dash_user_add_webinar_host_body = 
        {
            "data": {
                "attendees_count": 3000,
                "email": global.srinivas__email_id,
                "first_name": global.srinivas_fname,
                "last_name": global.srinivas_lname
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_webinar_host_body)
        if (response.status == 200)
        {
            global.third_Party_Zoom_Integration_ids = response.body.data.ids.webinar_host_id;
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Webinar Hosts[Read]: true - Added and store certain response data.: GET /backend/api/v1/organisations/org_id/events/event_id/webinars', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            global.host_added_on_admin_dash_id = response.body.data.webinar_host_data[0].id;
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.webinar_host_data[0].first_name).to.equal(global.srinivas_fname);
            expect(response.body.data.webinar_host_data[0].last_name).to.equal(global.srinivas_lname);
            expect(response.body.data.webinar_host_data[0].email).to.equal(global.srinivas__email_id);
            expect(response.body.data.webinar_host_data[0].attendees_count).to.equal(3000);
            expect(response.body.data.total_page).to.equal(1);
            expect(response.body.data.total_count).to.equal(1);
            expect(response.body.data.current_page).to.equal(1);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Webinar Hosts[Write]: true - Again updating and store certain response data.: PUT /backend/api/v1/organisations/org_id/events/event_id/webinars/webinar_id', async () => 
    {
        const   admin_dash_user_update_webinar_host_body = 
        {
            "data": {
                "attendees_count": 3000,
                "email": global.srinivas__email_id,
                "first_name": global.srinivas_fname,
                "last_name": global.srinivas_lname
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars/'+global.third_Party_Zoom_Integration_ids, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', admin_dash_user_update_webinar_host_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Org Dashboard fetch the people list to store the host id: POST /api/v1/people/list', async () => 
    {
        const   org_dash_fetch_people_body = 
        {
            "data": {
                "filter": {}
            }
        }
        var response = await sendRequest(environment.baseURL, '/api/v1/people/list', {'eventid':global.org_dash_signup_event_id,'organiserid':global.org_dash_signup_id,'Content-Type':'application/json', 'authorization':'Bearer '+global.org_dash_signup_etoken, 'buildversion':process.env.buildversion},'post', org_dash_fetch_people_body)
        if (response.status == 200)
        {
            global.org_dash_people_host_id = response.body.data[0].userId;
            expect(response.body.status).to.equal(200);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Org Dashboard add the host in the setting studio host to map in session hbs: POST /api/v1/broadcaststudio/host/add', async () => 
    {
        const   org_dash_add_host_body = 
        {
            "data": [
                {
                    "userId": global.org_dash_people_host_id
                }
            ]
        }
        var response = await sendRequest(environment.baseURL, '/api/v1/broadcaststudio/host/add', {'eventid':global.org_dash_signup_event_id,'organiserid':global.org_dash_signup_id,'Content-Type':'application/json', 'authorization':'Bearer '+global.org_dash_signup_etoken, 'buildversion':process.env.buildversion},'post', org_dash_add_host_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(200);
            expect(response.body.message).to.equal(Responsemessages.parameter_host_added_success_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Org Dashboard create session to map the zoom host and verify the read, write & delete response: POST /backend/api/v2/events/agendas', async () => 
    {
        global.org_dash_add_agenda_title = casual.word;
        const   org_dash_create_session_body = 
        {
            "data": {
                "title": global.org_dash_add_agenda_title,
                "start_time_milli": new Date().getTime(),
                "end_time_milli": (addTime(new Date(), 1)).getTime(),
                "description": "<p>"+casual.short_description+"</p>",
                "agenda_track_id": "",
                "banner": ""
            }
        }
        var response = await sendRequest(environment.baseURL1, '/backend/api/v2/events/agendas', {'eventid':global.org_dash_signup_event_id,'organiserid':global.org_dash_signup_id,'Content-Type':'application/json', 'authorization':'Bearer '+global.org_dash_signup_etoken, 'buildversion':process.env.buildversion},'post', org_dash_create_session_body)
        if (response.status == 200)
        {
            global.org_dash_added_session_id = response.body.data.ids.agenda_id;
            expect(response.body.status).to.equal(200);
            expect(response.body.message).to.equal(Responsemessages.Parameter_sessions_post_successfully_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Org Dashboard map the studio host to added session and verify the response: POST /backend/api/v2/agendas/stream', async () => 
    {
        const   org_dash_map_host_session_body = 
        {
            "data": {
                "is_stream": 1,
                "stream_type_id": 4,
                "stream_link": "",
                "stream_recording_link": "",
                "is_moderate_qna": 0,
                "hosting_properties": "[{\"type\":\"LIVE_CHAT\",\"name\":\"CHAT\",\"isActive\":\"YES\"},{\"type\":\"QUESTION_AND_ANSWERS\",\"name\":\"Q & A\",\"isActive\":\"YES\"},{\"type\":\"LIVE_POLLS\",\"name\":\"POLLS\",\"isActive\":\"YES\"},{\"type\":\"ATTENDEE_LIST\",\"name\":\"ATTENDEES\",\"isActive\":\"YES\"},{\"type\":\"SESSIONS\",\"name\":\"SESSIONS\",\"isActive\":\"YES\"}]",
                "is_closed_caption_on": 0,
                "stream_subtype_id": 3,
                "studio_host_id": global.org_dash_people_host_id
            }
        }
        var response = await sendRequest(environment.baseURL1, '/backend/api/v2/agendas/stream', {'eventid':global.org_dash_signup_event_id,'organiserid':global.org_dash_signup_id,'Content-Type':'application/json', 'authorization':'Bearer '+global.org_dash_signup_etoken, 'buildversion':process.env.buildversion, 'agendaid': global.org_dash_added_session_id},'post', org_dash_map_host_session_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(200);
            expect(response.body.message).to.equal(Responsemessages.Parameter_sessions_HBS_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Session Streams[Read]: true - Fetch and verify response data: GET /backend/api/v1/organisations/org_id/events/event_id/sessions', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            global.admin_dash_rtmp_url = response.body.data.session_stream_data[0].rtmp_url;
            global.admin_dash_stream_key = response.body.data.session_stream_data[0].stream_key;
            global.admin_dash_stream_url = response.body.data.session_stream_data[0].stream_link;
            global.admin_dash_player_meta_type_id = response.body.data.session_stream_data[0].player_meta_type_id;
            global.admin_dash_player_player_type_id = response.body.data.session_stream_data[0].player_type_id;
            global.admin_dash_player_source_id = response.body.data.session_stream_data[0].rtmp_source_id;

            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.session_stream_data[0].id).to.equal(global.org_dash_added_session_id);
            expect(response.body.data.session_stream_data[0].name).to.equal(global.org_dash_add_agenda_title);

            expect(response.body.data.webinar_host_list[0].id).to.equal(global.third_Party_Zoom_Integration_ids);
            expect(response.body.data.webinar_host_list[0].first_name).to.equal(global.srinivas_fname);
            expect(response.body.data.webinar_host_list[0].last_name).to.equal(global.srinivas_lname);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Session Streams[Read]: true - Fetch to edit and verify response data: GET /backend/api/v1/organisations/org_id/events/event_id/sessions/session_id', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions/'+global.org_dash_added_session_id, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            global.admin_dash_rtmp_url_try_edit = response.body.data.rtmp_url;
            global.admin_dash_stream_key_try_edit = response.body.data.stream_key;
            global.admin_dash_stream_url_try_edit = response.body.data.stream_link;
            global.admin_dash_player_meta_type_id_try_edit = response.body.data.player_meta_type_id;
            global.admin_dash_player_player_type_id_try_edit = response.body.data.player_type_id;
            global.admin_dash_player_source_id_try_edit = response.body.data.rtmp_source_id;

            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.id).to.equal(global.org_dash_added_session_id);
            expect(response.body.data.name).to.equal(global.org_dash_add_agenda_title);

            expect(response.body.data.rtmp_source_id).to.equal(global.admin_dash_player_source_id);
            expect(response.body.data.player_type_id).to.equal(global.admin_dash_player_player_type_id);
            expect(response.body.data.player_meta_type_id).to.equal(global.admin_dash_player_meta_type_id);
            expect(response.body.data.stream_link).to.equal(global.admin_dash_stream_url);
            expect(response.body.data.stream_key).to.equal(global.admin_dash_stream_key);
            expect(response.body.data.rtmp_url).to.equal(global.admin_dash_rtmp_url);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Session Streams[Write]: true - Update and verify response data: PUT /backend/api/v1/organisations/org_id/events/event_id/sessions/session_id', async () => 
    {
        const   org_dash_session_streaming_update_body = 
        {
            "data": {
                "host_id": null,
                "source_id": global.admin_dash_player_source_id_try_edit,
                "rtmp_url": global.admin_dash_rtmp_url_try_edit,
                "stream_key": global.admin_dash_stream_key_try_edit,
                "stream_url": global.admin_dash_stream_url_try_edit,
                "player_type_id": global.admin_dash_player_player_type_id_try_edit,
                "player_meta_type_id": global.admin_dash_player_meta_type_id_try_edit,
                "player_meta_data": ""
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions/'+global.org_dash_added_session_id, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', org_dash_session_streaming_update_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events All permission, Session Streams[Read]: true - Refresh and verify response data: POST /backend/api/v1/organisations/org_id/events/event_id/sessions/session_id/refresh', async () => 
    {
        const   org_dash_session_streaming_refresh_body = 
        {
            "data": {
                "email": global.user_email_id
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions/'+global.org_dash_added_session_id+'/refresh', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', org_dash_session_streaming_refresh_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.data.response.status).to.equal(Responsemessages.parameter_true_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Logs All permission, Activitylog[Read]: true - Added and store certain response data.: GET /backend/api/v1/activitylog', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/activitylog', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body).to.have.all.keys("status","data");
            expect(response.body.data).to.have.all.keys("organisationData","current_page","total_count","total_page");
            expect(response.body.data.organisationData[0]).to.have.all.keys("hubilo_admin_id","msg","created_at","admin");
            expect(response.body.data.organisationData[0].admin).to.have.all.keys("id","first_name","last_name");
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Users All permission, Users[Read]: true - Fetch the list of users on the super admin: GET /api/v1/users?page=0&limit=100', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users?page=0&limit=100', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'get')
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body).to.have.all.keys("data", "message");
            expect(response.body.data).to.have.all.keys("items","totalCount", "totalPages", "currentPage");
            expect(response.body.data.items[0]).to.have.all.keys("id", "firstName", "lastName", "email", "isDeactivated", "hasLoggedIn", "roles", "permissions");
            expect(response.body.data.items[0].roles[0]).to.have.all.keys("id", "name");
            expect(response.body.data.items[0].permissions[0]).to.have.all.keys("id", "code","readGranted","writeGranted","deleteGranted");
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Users All permission, Roles[Read]: true - Fetch the list of roles on the super admin: GET /api/v1/roles?page=0&limit=100', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles?page=0&limit=100', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'get')
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body).to.have.all.keys("data", "message");
            expect(response.body.data).to.have.all.keys("items","totalCount", "totalPages", "currentPage");
            expect(response.body.data.items[0]).to.have.all.keys("id", "name","description","isDeactivated","isDefault","permissions");
            expect(response.body.data.items[0].permissions[0]).to.have.all.keys("permissionId", "roleId","readGranted","writeGranted","deleteGranted","platform","type","name");

        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Admin Dashboard All permission, Particular Roles[Read]: true - Fetch the role and assert the response: GET /api/v1/roles/role_id', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'get')
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.id).to.equal(global.role_id);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(1);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(2);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(3);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(4);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(5);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(6);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
 
            expect(response.body.data.permissions[6].permissionId).to.equal(7);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[7].permissionId).to.equal(8);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(9);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[9].permissionId).to.equal(10);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[10].permissionId).to.equal(11);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[11].permissionId).to.equal(12);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[12].permissionId).to.equal(13);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[13].permissionId).to.equal(14);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[14].permissionId).to.equal(15);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[15].permissionId).to.equal(16);
            expect(response.body.data.permissions[15].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[15].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[16].permissionId).to.equal(17);
            expect(response.body.data.permissions[16].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[16].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[17].permissionId).to.equal(18);
            expect(response.body.data.permissions[17].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[17].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[17].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[18].permissionId).to.equal(19);
            expect(response.body.data.permissions[18].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[18].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[18].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[19].permissionId).to.equal(20);
            expect(response.body.data.permissions[19].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[19].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[19].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[20].permissionId).to.equal(21);
            expect(response.body.data.permissions[20].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[20].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[20].name).to.equal(Responsemessages.parameter_Roles_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Admin Dashboard Check All permission [Read]: true - Fetch the permission and assert the response: GET /api/v1/permissions', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/permissions', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'get')
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            
            expect(response.body.data[0].id).to.equal(1);
            expect(response.body.data[0].name).to.equal(Responsemessages.parameter_Overview_as_value);
            expect(response.body.data[0].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[0].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[0].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data[0].code).to.equal(Responsemessages.parameter_A_O_OVERVIEW_as_value);

            expect(response.body.data[1].id).to.equal(2);
            expect(response.body.data[1].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[1].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[1].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);
            expect(response.body.data[1].code).to.equal(Responsemessages.parameter_A_O_ORGANISER_PROFILE__as_value);

            expect(response.body.data[2].id).to.equal(3);
            expect(response.body.data[2].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[2].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[2].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);
            expect(response.body.data[2].code).to.equal(Responsemessages.parameter_A_O_FEATURES_AND_PRICING_as_value);

            expect(response.body.data[3].id).to.equal(4);
            expect(response.body.data[3].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[3].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[3].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);
            expect(response.body.data[3].code).to.equal(Responsemessages.parameter_A_O_FEES_AND_COMMISSIONS_as_value);

            expect(response.body.data[4].id).to.equal(5);
            expect(response.body.data[4].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[4].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[4].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);
            expect(response.body.data[4].code).to.equal(Responsemessages.parameter_A_O_ORGANISER_SETTINGS_as_value);

            expect(response.body.data[5].id).to.equal(6);
            expect(response.body.data[5].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[5].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[5].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
            expect(response.body.data[5].code).to.equal(Responsemessages.parameter_A_O_CERTIFICATE_TOKEN_as_value);

            expect(response.body.data[6].id).to.equal(7);
            expect(response.body.data[6].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[6].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[6].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[6].name).to.equal(Responsemessages.parameter_Overview_as_value);
            expect(response.body.data[6].code).to.equal(Responsemessages.parameter_A_E_OVERVIEW_as_value);

            expect(response.body.data[7].id).to.equal(8);
            expect(response.body.data[7].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[7].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[7].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);
            expect(response.body.data[7].code).to.equal(Responsemessages.parameter_A_E_EVENT_SETTINGS_as_value);

            expect(response.body.data[8].id).to.equal(9);
            expect(response.body.data[8].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[8].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[8].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);
            expect(response.body.data[8].code).to.equal(Responsemessages.parameter_A_E_FEES_AND_COMMISSIONS_as_value);

            expect(response.body.data[9].id).to.equal(10);
            expect(response.body.data[9].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[9].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[9].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);
            expect(response.body.data[9].code).to.equal(Responsemessages.parameter_A_E_TICKETING_TRANSFER_as_value);

            expect(response.body.data[10].id).to.equal(11);
            expect(response.body.data[10].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[10].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[10].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);
            expect(response.body.data[10].code).to.equal(Responsemessages.parameter_A_E_FEATURES_AND_PRICING_as_value);

            expect(response.body.data[11].id).to.equal(12);
            expect(response.body.data[11].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[11].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[11].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);
            expect(response.body.data[11].code).to.equal(Responsemessages.parameter_A_E_COUPON_CODES_as_value);

            expect(response.body.data[12].id).to.equal(13);
            expect(response.body.data[12].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[12].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[12].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
            expect(response.body.data[12].code).to.equal(Responsemessages.parameter_A_E_APP_SETTINGS_as_value);

            expect(response.body.data[13].id).to.equal(14);
            expect(response.body.data[13].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[13].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[13].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);
            expect(response.body.data[13].code).to.equal(Responsemessages.parameter_A_E_APP_NOTIFICATION_as_value);

            expect(response.body.data[14].id).to.equal(15);
            expect(response.body.data[14].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[14].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[14].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);
            expect(response.body.data[14].code).to.equal(Responsemessages.parameter_A_E_WEBINAR_HOSTS_as_value);

            expect(response.body.data[15].id).to.equal(16);
            expect(response.body.data[15].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[15].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[15].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value);
            expect(response.body.data[15].code).to.equal(Responsemessages.parameter_A_E_SESSION_STREAMS_as_value);

            expect(response.body.data[16].id).to.equal(17);
            expect(response.body.data[16].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[16].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[16].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
            expect(response.body.data[16].code).to.equal(Responsemessages.parameter_A_E_CERTIFICATE_TOKEN_as_value);

            expect(response.body.data[17].id).to.equal(18);
            expect(response.body.data[17].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[17].writeEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[17].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value);
            expect(response.body.data[17].code).to.equal(Responsemessages.parameter_A_L_MY_LOGS_as_value);

            expect(response.body.data[18].id).to.equal(19);
            expect(response.body.data[18].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[18].writeEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[18].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value);
            expect(response.body.data[18].code).to.equal(Responsemessages.parameter_A_L_ALL_LOGS_as_value);

            expect(response.body.data[19].id).to.equal(20);
            expect(response.body.data[19].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[19].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[19].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data[19].name).to.equal(Responsemessages.parameter_Users_as_value);
            expect(response.body.data[19].code).to.equal(Responsemessages.parameter_A_U_USERS_as_value);

            expect(response.body.data[20].id).to.equal(21);
            expect(response.body.data[20].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[20].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[20].deleteEnabled).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data[20].name).to.equal(Responsemessages.parameter_Roles_as_value);
            expect(response.body.data[20].code).to.equal(Responsemessages.parameter_A_U_ROLES_as_value);

            expect(response.body.data[21].id).to.equal(22);
            expect(response.body.data[21].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[21].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[21].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[21].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[21].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[21].name).to.equal(Responsemessages.parameter_Overall_as_value);
            expect(response.body.data[21].code).to.equal(Responsemessages.parameter_O_E_OVERALL_as_value);

            expect(response.body.data[22].id).to.equal(23);
            expect(response.body.data[22].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[22].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[22].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[22].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[22].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[22].name).to.equal(Responsemessages.parameter_Registration_as_value);
            expect(response.body.data[22].code).to.equal(Responsemessages.parameter_O_E_REGISTRATION_as_value);

            expect(response.body.data[23].id).to.equal(24);
            expect(response.body.data[23].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[23].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[23].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[23].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[23].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[23].name).to.equal(Responsemessages.parameter_Sessions_as_value);
            expect(response.body.data[23].code).to.equal(Responsemessages.parameter_O_E_SESSIONS_as_value);

            expect(response.body.data[24].id).to.equal(25);
            expect(response.body.data[24].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[24].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[24].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[24].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[24].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[24].name).to.equal(Responsemessages.parameter_People_as_value);
            expect(response.body.data[24].code).to.equal(Responsemessages.parameter_O_E_PEOPLE_as_value);

            expect(response.body.data[25].id).to.equal(26);
            expect(response.body.data[25].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[25].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[25].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[25].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[25].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[25].name).to.equal(Responsemessages.parameter_Virtual_Booths_as_value);
            expect(response.body.data[25].code).to.equal(Responsemessages.parameter_O_E_VIRTUAL_BOOTHS_as_value);

            expect(response.body.data[26].id).to.equal(27);
            expect(response.body.data[26].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[26].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[26].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[26].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[26].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[26].name).to.equal(Responsemessages.parameter_Meetings_as_value);
            expect(response.body.data[26].code).to.equal(Responsemessages.parameter_O_E_MEETINGS_as_value);

            expect(response.body.data[27].id).to.equal(28);
            expect(response.body.data[27].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[27].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[27].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[27].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[27].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[27].name).to.equal(Responsemessages.parameter_Lounge_as_value);
            expect(response.body.data[27].code).to.equal(Responsemessages.parameter_O_E_LOUNGE_as_value);

            expect(response.body.data[28].id).to.equal(29);
            expect(response.body.data[28].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[28].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[28].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[28].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[28].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[28].name).to.equal(Responsemessages.parameter_Rooms_as_value);
            expect(response.body.data[28].code).to.equal(Responsemessages.parameter_O_E_ROOMS_as_value);

            expect(response.body.data[29].id).to.equal(30);
            expect(response.body.data[29].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[29].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[29].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[29].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[29].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[29].name).to.equal(Responsemessages.parameter_Engagement_as_value);
            expect(response.body.data[29].code).to.equal(Responsemessages.parameter_O_E_ENGAGEMENT_as_value);

            expect(response.body.data[30].id).to.equal(31);
            expect(response.body.data[30].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[30].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[30].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[30].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[30].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[30].name).to.equal(Responsemessages.parameter_Embedded_Apps_as_value);
            expect(response.body.data[30].code).to.equal(Responsemessages.parameter_O_E_EMBEDDED_APPS_as_value);

            expect(response.body.data[31].id).to.equal(32);
            expect(response.body.data[31].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[31].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[31].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[31].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[31].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[31].name).to.equal(Responsemessages.parameter_Branding_as_value);
            expect(response.body.data[31].code).to.equal(Responsemessages.parameter_O_E_BRANDING_as_value);

            expect(response.body.data[32].id).to.equal(33);
            expect(response.body.data[32].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[32].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[32].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[32].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[32].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[32].name).to.equal(Responsemessages.parameter_Analytics_as_value);
            expect(response.body.data[32].code).to.equal(Responsemessages.parameter_O_E_ANALYTICS_as_value);

            expect(response.body.data[33].id).to.equal(34);
            expect(response.body.data[33].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[33].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[33].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[33].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[33].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[33].name).to.equal(Responsemessages.parameter_Settings_as_value);
            expect(response.body.data[33].code).to.equal(Responsemessages.parameter_O_E_SETTINGS_as_value);

            expect(response.body.data[34].id).to.equal(35);
            expect(response.body.data[34].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[34].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[34].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[34].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[34].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[34].name).to.equal(Responsemessages.parameter_Recording_as_value);
            expect(response.body.data[34].code).to.equal(Responsemessages.parameter_O_E_RECORDING_as_value);

            expect(response.body.data[35].id).to.equal(36);
            expect(response.body.data[35].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[35].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[35].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[35].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[35].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data[35].name).to.equal(Responsemessages.parameter_File_Logs_as_value);
            expect(response.body.data[35].code).to.equal(Responsemessages.parameter_O_E_FILE_LOGS_as_value);

            expect(response.body.data[36].id).to.equal(37);
            expect(response.body.data[36].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[36].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[36].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[36].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[36].type).to.equal(Responsemessages.parameter_CONTACTS_as_value);
            expect(response.body.data[36].name).to.equal(Responsemessages.parameter_Overall_as_value);
            expect(response.body.data[36].code).to.equal(Responsemessages.parameter_O_C_OVERALL_as_value);

            expect(response.body.data[37].id).to.equal(38);
            expect(response.body.data[37].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[37].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[37].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[37].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[37].type).to.equal(Responsemessages.parameter_ANALYTICS_as_value);
            expect(response.body.data[37].name).to.equal(Responsemessages.parameter_Overall_as_value);
            expect(response.body.data[37].code).to.equal(Responsemessages.parameter_O_AN_OVERALL_as_value);

            expect(response.body.data[38].id).to.equal(39);
            expect(response.body.data[38].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[38].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[38].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[38].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[38].type).to.equal(Responsemessages.parameter_INTEGRATIONS_as_value);
            expect(response.body.data[38].name).to.equal(Responsemessages.parameter_All_Integrations_as_value);
            expect(response.body.data[38].code).to.equal(Responsemessages.parameter_O_I_ALL_INTEGRATIONS_as_value);

            expect(response.body.data[39].id).to.equal(40);
            expect(response.body.data[39].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[39].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[39].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[39].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[39].type).to.equal(Responsemessages.parameter_ACCOUNT_as_value);
            expect(response.body.data[39].name).to.equal(Responsemessages.parameter_Account_Details_as_value);
            expect(response.body.data[39].code).to.equal(Responsemessages.parameter_O_A_ACCOUNT_DETAILS_as_value);

            expect(response.body.data[40].id).to.equal(41);
            expect(response.body.data[40].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[40].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[40].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[40].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[40].type).to.equal(Responsemessages.parameter_ACCOUNT_as_value);
            expect(response.body.data[40].name).to.equal(Responsemessages.parameter_Payout_as_value);
            expect(response.body.data[40].code).to.equal(Responsemessages.parameter_O_A_PAYOUT_as_value);

            expect(response.body.data[41].id).to.equal(42);
            expect(response.body.data[41].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[41].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[41].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[41].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[41].type).to.equal(Responsemessages.parameter_ACCOUNT_as_value);
            expect(response.body.data[41].name).to.equal(Responsemessages.parameter_Team_as_value);
            expect(response.body.data[41].code).to.equal(Responsemessages.parameter_O_A_TEAM_as_value);

            expect(response.body.data[42].id).to.equal(43);
            expect(response.body.data[42].readEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[42].writeEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[42].deleteEnabled).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data[42].platform).to.equal(Responsemessages.parameter_ORGANISER_DASHBOARD_as_value);
            expect(response.body.data[42].type).to.equal(Responsemessages.parameter_ACCOUNT_as_value);
            expect(response.body.data[42].name).to.equal(Responsemessages.parameter_Subscription_Billings_as_value);
            expect(response.body.data[42].code).to.equal(Responsemessages.parameter_O_A_SUBSCRIPTION_AND_BILLINGS_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Profile[Write]:false - Super Admin updated the added Admin Dashboard role and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 1,
                    "code": "A-O-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 2,
                    "code": "A-O-ORGANISER_PROFILE",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 3,
                    "code": "A-O-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 4,
                    "code": "A-O-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 5,
                    "code": "A-O-ORGANISER_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 6,
                    "code": "A-O-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {

            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(1);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(2);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(3);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(4);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(5);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(6);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
 
            expect(response.body.data.permissions[6].permissionId).to.equal(7);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[7].permissionId).to.equal(8);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(9);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[9].permissionId).to.equal(10);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[10].permissionId).to.equal(11);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[11].permissionId).to.equal(12);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[12].permissionId).to.equal(13);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[13].permissionId).to.equal(14);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[14].permissionId).to.equal(15);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[15].permissionId).to.equal(16);
            expect(response.body.data.permissions[15].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[15].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[16].permissionId).to.equal(17);
            expect(response.body.data.permissions[16].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[16].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[17].permissionId).to.equal(18);
            expect(response.body.data.permissions[17].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[17].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[17].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[18].permissionId).to.equal(19);
            expect(response.body.data.permissions[18].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[18].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[18].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[19].permissionId).to.equal(20);
            expect(response.body.data.permissions[19].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[19].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[19].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[20].permissionId).to.equal(21);
            expect(response.body.data.permissions[20].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[20].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[20].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Profile[Write]:false - Make the admin dashboard user login again and store the etoken to validate the changes: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Profile[Write]:false - Verify the Admin Dashboard user is not able to write and verify the response: PUT /backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', async () => 
    {
        const   put_signup_org_body = 
        {
            "data": {
                "first_name": global.org_dash_signup_first_name,
                "last_name": global.org_dash_signup_last_name,
                "organisation": global.org_dash_signup_last_organisation
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', {'Content-Type':'application/json', 'Accept':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken, 'buildversion':'1.2'},'put', put_signup_org_body, 401)
        if (response.status != 200)
        {

            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Profile[Read]:true - Verify the Admin Dashboard user is able to read and verify the response: GET /backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'get')
        if (response.status == 200)
        {
           expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
           expect(response.body.data.organisation).to.equal(global.org_dash_signup_last_organisation);
           expect(response.body.data.first_name).to.equal(global.org_dash_signup_first_name);
           expect(response.body.data.last_name).to.equal(global.org_dash_signup_last_name);
           expect(response.body.data.email).to.equal(global.org_dash_signup_user_email);
        }
        else
        {
            console.log("The failed response is:", response)
        }
    })

    it.only('Organiser Profile[Write|Read]:false - Super Admin updated the added Admin Dashboard role and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 1,
                    "code": "A-O-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 2,
                    "code": "A-O-ORGANISER_PROFILE",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 3,
                    "code": "A-O-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 4,
                    "code": "A-O-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 5,
                    "code": "A-O-ORGANISER_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 6,
                    "code": "A-O-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(1);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(2);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(3);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(4);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(5);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(6);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
 
            expect(response.body.data.permissions[6].permissionId).to.equal(7);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[7].permissionId).to.equal(8);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(9);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[9].permissionId).to.equal(10);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[10].permissionId).to.equal(11);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[11].permissionId).to.equal(12);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[12].permissionId).to.equal(13);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[13].permissionId).to.equal(14);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[14].permissionId).to.equal(15);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[15].permissionId).to.equal(16);
            expect(response.body.data.permissions[15].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[15].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[16].permissionId).to.equal(17);
            expect(response.body.data.permissions[16].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[16].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[17].permissionId).to.equal(18);
            expect(response.body.data.permissions[17].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[17].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[17].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[18].permissionId).to.equal(19);
            expect(response.body.data.permissions[18].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[18].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[18].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[19].permissionId).to.equal(20);
            expect(response.body.data.permissions[19].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[19].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[19].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[20].permissionId).to.equal(21);
            expect(response.body.data.permissions[20].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[20].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[20].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Profile[Write|Read]:false - Make the admin dashboard user login again and store the etoken to validate the changes: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Profile[Write|Read]:false - Verify the Admin Dashboard user is not able to read|write and verify the response: PUT /backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', async () => 
    {
        const   put_signup_org_body = 
        {
            "data": {
                "first_name": global.org_dash_signup_first_name,
                "last_name": global.org_dash_signup_last_name,
                "organisation": global.org_dash_signup_last_organisation
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'put', put_signup_org_body, 401)
        if (response.status != 200)
        {
           expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Profile[Write|Read]:false - Verify the Admin Dashboard user is not able to read|write and verify the response: GET /backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/profile', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken /*, 'buildversion':'1.2'*/}, 'get','', 401)
        if (response.status != 200)
        {
           expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response)
        }
    })

    it.only('Organiser Features & Pricing[Write]:false - Super Admin updated the added Admin Dashboard role and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 1,
                    "code": "A-O-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 2,
                    "code": "A-O-ORGANISER_PROFILE",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 3,
                    "code": "A-O-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 4,
                    "code": "A-O-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 5,
                    "code": "A-O-ORGANISER_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 6,
                    "code": "A-O-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(1);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(2);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(3);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(4);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(5);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(6);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
 
            expect(response.body.data.permissions[6].permissionId).to.equal(7);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[7].permissionId).to.equal(8);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(9);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[9].permissionId).to.equal(10);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[10].permissionId).to.equal(11);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[11].permissionId).to.equal(12);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[12].permissionId).to.equal(13);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[13].permissionId).to.equal(14);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[14].permissionId).to.equal(15);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[15].permissionId).to.equal(16);
            expect(response.body.data.permissions[15].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[15].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[16].permissionId).to.equal(17);
            expect(response.body.data.permissions[16].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[16].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[17].permissionId).to.equal(18);
            expect(response.body.data.permissions[17].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[17].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[17].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[18].permissionId).to.equal(19);
            expect(response.body.data.permissions[18].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[18].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[18].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[19].permissionId).to.equal(20);
            expect(response.body.data.permissions[19].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[19].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[19].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[20].permissionId).to.equal(21);
            expect(response.body.data.permissions[20].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[20].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[20].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Features & Pricing[Write]:false - Make the admin dashboard user login again and store the etoken to validate the changes: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Features & Pricing[Write]:false - Verify the Admin Dashboard user is not able to write and verify the response: PUT /backend/api/v1/organisations/'+global.org_dash_signup_id+'/pricing', async () => 
    {
        const   put_Features_n_Pricing_org_body = 
        {
            "data": {
                "organiser_wise_features": [
                    {
                        "organiser_feature_meta_id": 1,
                        "price": 0,
                        "price_per_event": 0,
                        "feature_name": "Multi Event",
                        "is_show": false,
                        "feature_package_licence_date_id": 1
                    }
                ],
                "event_wise_features": [
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 2,
                        "price": 0,
                        "event_feature_meta_id": 1
                    },
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 4,
                        "price": 0,
                        "event_feature_meta_id": 2
                    },
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 8,
                        "price": 0,
                        "event_feature_meta_id": 3
                    },
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 9,
                        "price": 0,
                        "event_feature_meta_id": 4
                    },
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 14,
                        "price": 0,
                        "event_feature_meta_id": 2
                    }
                ]
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/pricing', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'put', put_Features_n_Pricing_org_body, 401)
        if (response.status != 200)
        {
           expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Features & Pricing[Read]:true - Verify the Admin Dashboard user is able to read and verify the response: GET /backend/api/v1/organisations/'+global.org_dash_signup_id+'/pricing', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/pricing', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.organiser_wise_features[0].feature_package_licence_date_id).to.equal(1);
            expect(response.body.data.organiser_wise_features[0].is_show).to.equal(0);
            expect(response.body.data.organiser_wise_features[0].feature_name).to.equal(Responsemessages.parameter_Multi_Event_as_value);
            expect(response.body.data.organiser_wise_features[0].price_per_event).to.equal(0);
            expect(response.body.data.organiser_wise_features[0].price).to.equal(0);
            expect(response.body.data.organiser_wise_features[0].organiser_feature_meta_id).to.equal(1);
            expect(response.body.data.organiser_wise_features[0].name).to.equal(Responsemessages.parameter_Multi_Event_App_as_value);
            expect(response.body.data.organiser_wise_features[0].icon).to.equal(Responsemessages.parameter_App_2_gray_svg_as_value);
            expect(response.body.data.organiser_wise_features[0].hover_icon).to.equal(Responsemessages.parameter_App_2_svg_as_value);

            expect(response.body.data.licence_date_list[0].id).to.equal(1);
            expect(response.body.data.licence_date_list[0].name).to.equal(Responsemessages.parameter_1_Year_as_value);

            expect(response.body.data.licence_date_list[1].id).to.equal(2);
            expect(response.body.data.licence_date_list[1].name).to.equal(Responsemessages.parameter_2_Years_as_value);

            expect(response.body.data.licence_date_list[2].id).to.equal(3);
            expect(response.body.data.licence_date_list[2].name).to.equal(Responsemessages.parameter_3_Years_as_value);
        }
        else
        {
            console.log("The failed response is:", response)
        }
    })

    it.only('Organiser Features & Pricing[Write|Read]:false - Super Admin updated the added Admin Dashboard role and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 1,
                    "code": "A-O-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 2,
                    "code": "A-O-ORGANISER_PROFILE",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 3,
                    "code": "A-O-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 4,
                    "code": "A-O-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 5,
                    "code": "A-O-ORGANISER_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 6,
                    "code": "A-O-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(1);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(2);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(3);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(4);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(5);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(6);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
 
            expect(response.body.data.permissions[6].permissionId).to.equal(7);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[7].permissionId).to.equal(8);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(9);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[9].permissionId).to.equal(10);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[10].permissionId).to.equal(11);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[11].permissionId).to.equal(12);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[12].permissionId).to.equal(13);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[13].permissionId).to.equal(14);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[14].permissionId).to.equal(15);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[15].permissionId).to.equal(16);
            expect(response.body.data.permissions[15].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[15].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[16].permissionId).to.equal(17);
            expect(response.body.data.permissions[16].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[16].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[17].permissionId).to.equal(18);
            expect(response.body.data.permissions[17].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[17].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[17].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[18].permissionId).to.equal(19);
            expect(response.body.data.permissions[18].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[18].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[18].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[19].permissionId).to.equal(20);
            expect(response.body.data.permissions[19].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[19].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[19].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[20].permissionId).to.equal(21);
            expect(response.body.data.permissions[20].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[20].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[20].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Features & Pricing[Write|Read]:false - Make the admin dashboard user login again and store the etoken to validate the changes: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Features & Pricing[Write|Read]:false - Verify the Admin Dashboard user is not able to read|write and verify the response: PUT /backend/api/v1/organisations/'+global.org_dash_signup_id+'/pricing', async () => 
    {
        const   put_Features_n_Pricing_org_body = 
        {
            "data": {
                "organiser_wise_features": [
                    {
                        "organiser_feature_meta_id": 1,
                        "price": 0,
                        "price_per_event": 0,
                        "feature_name": "Multi Event",
                        "is_show": false,
                        "feature_package_licence_date_id": 1
                    }
                ],
                "event_wise_features": [
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 2,
                        "price": 0,
                        "event_feature_meta_id": 1
                    },
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 4,
                        "price": 0,
                        "event_feature_meta_id": 2
                    },
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 8,
                        "price": 0,
                        "event_feature_meta_id": 3
                    },
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 9,
                        "price": 0,
                        "event_feature_meta_id": 4
                    },
                    {
                        "feature_package_licence_date_id": 1,
                        "event_feature_package_meta_id": 14,
                        "price": 0,
                        "event_feature_meta_id": 2
                    }
                ]
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/pricing', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'put', put_Features_n_Pricing_org_body, 401)
        if (response.status != 200)
        {
           expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Features & Pricing[Write|Read]:false - Verify the Admin Dashboard user is not able to read|write and verify the response: GET /backend/api/v1/organisations/'+global.org_dash_signup_id+'/pricing', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/pricing', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'get', '', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response)
        }
    })

    it.only('Organiser FEES_AND_COMMISSIONS[Write]:false - Super Admin updated the added Admin Dashboard role and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 1,
                    "code": "A-O-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 2,
                    "code": "A-O-ORGANISER_PROFILE",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 3,
                    "code": "A-O-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 4,
                    "code": "A-O-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 5,
                    "code": "A-O-ORGANISER_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 6,
                    "code": "A-O-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(1);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(2);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(3);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(4);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(5);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(6);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
 
            expect(response.body.data.permissions[6].permissionId).to.equal(7);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[7].permissionId).to.equal(8);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(9);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[9].permissionId).to.equal(10);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[10].permissionId).to.equal(11);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[11].permissionId).to.equal(12);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[12].permissionId).to.equal(13);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[13].permissionId).to.equal(14);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[14].permissionId).to.equal(15);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[15].permissionId).to.equal(16);
            expect(response.body.data.permissions[15].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[15].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[16].permissionId).to.equal(17);
            expect(response.body.data.permissions[16].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[16].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[17].permissionId).to.equal(18);
            expect(response.body.data.permissions[17].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[17].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[17].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[18].permissionId).to.equal(19);
            expect(response.body.data.permissions[18].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[18].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[18].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[19].permissionId).to.equal(20);
            expect(response.body.data.permissions[19].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[19].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[19].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[20].permissionId).to.equal(21);
            expect(response.body.data.permissions[20].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[20].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[20].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })
    
    it.only('Organiser FEES_AND_COMMISSIONS[Write]:false - Make the admin dashboard user login again and store the etoken to validate the changes: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser FEES_AND_COMMISSIONS[Write]:false - Verify the Admin Dashboard user is not able to write and verify the response: PUT /api/v1/organisations/'+global.org_dash_signup_id+'/fees', async () => 
    {
        const   put_Features_n_Pricing_org_body = 
        {
            "data": {
                "absorb_stripe": 0,
                "pass_stripe": 0,
                "stripe_per_ticket": 0
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/fees', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'put', put_Features_n_Pricing_org_body, 401)
        if (response.status != 200)
        {
           expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser FEES_AND_COMMISSIONS[Read]:true - Verify the Admin Dashboard user is able to read and verify the response: GET /api/v1/organisations/'+global.org_dash_signup_id+'/fees', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/fees', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'get',)
        if (response.status == 200)
        {
           expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
           expect(response.body.data.absorb_stripe).to.equal(0);
           expect(response.body.data.pass_stripe).to.equal(0);
           expect(response.body.data.stripe_per_ticket).to.equal(0);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser FEES_AND_COMMISSIONS[Write|Read]:false - Super Admin updated the added Admin Dashboard role and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 1,
                    "code": "A-O-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 2,
                    "code": "A-O-ORGANISER_PROFILE",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 3,
                    "code": "A-O-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 4,
                    "code": "A-O-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 5,
                    "code": "A-O-ORGANISER_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 6,
                    "code": "A-O-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(1);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(2);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(3);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(4);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(5);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(6);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
 
            expect(response.body.data.permissions[6].permissionId).to.equal(7);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[7].permissionId).to.equal(8);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(9);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[9].permissionId).to.equal(10);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[10].permissionId).to.equal(11);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[11].permissionId).to.equal(12);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[12].permissionId).to.equal(13);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[13].permissionId).to.equal(14);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[14].permissionId).to.equal(15);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[15].permissionId).to.equal(16);
            expect(response.body.data.permissions[15].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[15].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[16].permissionId).to.equal(17);
            expect(response.body.data.permissions[16].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[16].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[17].permissionId).to.equal(18);
            expect(response.body.data.permissions[17].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[17].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[17].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[18].permissionId).to.equal(19);
            expect(response.body.data.permissions[18].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[18].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[18].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[19].permissionId).to.equal(20);
            expect(response.body.data.permissions[19].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[19].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[19].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[20].permissionId).to.equal(21);
            expect(response.body.data.permissions[20].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[20].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[20].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser FEES_AND_COMMISSIONS[Write|Read]:false - Make the admin dashboard user login again and store the etoken to validate the changes: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser FEES_AND_COMMISSIONS[Write|Read]:false - Verify the Admin Dashboard user is not able to write and verify the response: PUT /api/v1/organisations/'+global.org_dash_signup_id+'/fees', async () => 
    {
        const   put_Features_n_Pricing_org_body = 
        {
            "data": {
                "absorb_stripe": 0,
                "pass_stripe": 0,
                "stripe_per_ticket": 0
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/fees', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'put', put_Features_n_Pricing_org_body, 401)
        if (response.status != 200)
        {
           expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser FEES_AND_COMMISSIONS[Write|Read]:false - Verify the Admin Dashboard user is not able to write and verify the response: GET /api/v1/organisations/'+global.org_dash_signup_id+'/fees', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/fees', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'get', '', 401)
        if (response.status != 200)
        {
           expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser ORGANISER_SETTINGS[Write]:false - Super Admin updated the added Admin Dashboard role and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 1,
                    "code": "A-O-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 2,
                    "code": "A-O-ORGANISER_PROFILE",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 3,
                    "code": "A-O-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 4,
                    "code": "A-O-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 5,
                    "code": "A-O-ORGANISER_SETTINGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 6,
                    "code": "A-O-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(1);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(2);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(3);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(4);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(5);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(6);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
 
            expect(response.body.data.permissions[6].permissionId).to.equal(7);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[7].permissionId).to.equal(8);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(9);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[9].permissionId).to.equal(10);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[10].permissionId).to.equal(11);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[11].permissionId).to.equal(12);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[12].permissionId).to.equal(13);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[13].permissionId).to.equal(14);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[14].permissionId).to.equal(15);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[15].permissionId).to.equal(16);
            expect(response.body.data.permissions[15].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[15].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[16].permissionId).to.equal(17);
            expect(response.body.data.permissions[16].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[16].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[17].permissionId).to.equal(18);
            expect(response.body.data.permissions[17].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[17].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[17].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[18].permissionId).to.equal(19);
            expect(response.body.data.permissions[18].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[18].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[18].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[19].permissionId).to.equal(20);
            expect(response.body.data.permissions[19].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[19].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[19].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[20].permissionId).to.equal(21);
            expect(response.body.data.permissions[20].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[20].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[20].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser ORGANISER_SETTINGS[Write]:false - Make the admin dashboard user login again and store the etoken to validate the changes: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser ORGANISER_SETTINGS[Write]:false - Verify the Admin Dashboard user is not able to write and verify the response: PUT /api/v1/organisations/'+global.org_dash_signup_id+'/settings', async () => 
    {
        const   put_Features_n_Pricing_org_body = 
        {
            "data": {
                "community_version": 2,
                "is_api_access_token": 1,
                "is_closed_caption_enabled": 1,
                "is_custom_theme": 1,
                "is_integration_embed_app": 1,
                "is_language_support": 1,
                "is_session_registration": 1,
                "is_sponsored_ads_support": 1,
                "is_sso_enabled": 1,
                "maximum_allowed_event_days": 0
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/settings', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'put', put_Features_n_Pricing_org_body, 401)
        if (response.status != 200)
        {
           expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser ORGANISER_SETTINGS[Read]:true - Verify the Admin Dashboard user is able to read and verify the response: GET /api/v1/organisations/'+global.org_dash_signup_id+'/settings', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/settings', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'get')
        if (response.status == 200)
        {
           expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
           expect(response.body.data.main_organiser_email).to.equal(global.org_dash_signup_user_email);
           expect(response.body.data.is_language_support).to.equal(0);
           expect(response.body.data.is_sponsored_ads_support).to.equal(1);
           expect(response.body.data.community_version).to.equal(2);
           expect(response.body.data.is_integration_embed_app).to.equal(0);
           expect(response.body.data.is_api_access_token).to.equal(0);
           expect(response.body.data.is_closed_caption_enabled).to.equal(0);
           expect(response.body.data.is_custom_theme).to.equal(0);
           expect(response.body.data.is_team_member).to.equal(0);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser ORGANISER_SETTINGS[Write|Read]:false - Super Admin updated the added Admin Dashboard role and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 1,
                    "code": "A-O-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 2,
                    "code": "A-O-ORGANISER_PROFILE",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 3,
                    "code": "A-O-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 4,
                    "code": "A-O-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 5,
                    "code": "A-O-ORGANISER_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 6,
                    "code": "A-O-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(1);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(2);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(3);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(4);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(5);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(6);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
 
            expect(response.body.data.permissions[6].permissionId).to.equal(7);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[7].permissionId).to.equal(8);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(9);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[9].permissionId).to.equal(10);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[10].permissionId).to.equal(11);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[11].permissionId).to.equal(12);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[12].permissionId).to.equal(13);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[13].permissionId).to.equal(14);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[14].permissionId).to.equal(15);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[15].permissionId).to.equal(16);
            expect(response.body.data.permissions[15].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[15].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[16].permissionId).to.equal(17);
            expect(response.body.data.permissions[16].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[16].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[17].permissionId).to.equal(18);
            expect(response.body.data.permissions[17].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[17].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[17].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[18].permissionId).to.equal(19);
            expect(response.body.data.permissions[18].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[18].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[18].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[19].permissionId).to.equal(20);
            expect(response.body.data.permissions[19].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[19].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[19].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[20].permissionId).to.equal(21);
            expect(response.body.data.permissions[20].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[20].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[20].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser ORGANISER_SETTINGS[Write|Read]:false - Make the admin dashboard user login again and store the etoken to validate the changes: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser ORGANISER_SETTINGS[Write|Read]:false - Verify the Admin Dashboard user is not able to read|write and verify the response: PUT /api/v1/organisations/'+global.org_dash_signup_id+'/settings', async () => 
    {
        const   put_Features_n_Pricing_org_body = 
        {
            "data": {
                "is_language_support": 1,
                "is_integration_embed_app": 1,
                "is_sponsored_ads_support": 1,
                "is_closed_caption_enabled": 1,
                "community_version": 2,
                "maximum_allowed_event_days": 0,
                "is_api_access_token": 1,
                "is_custom_theme": 1,
                "is_sso_enabled": 1,
                "is_session_registration": 1
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/settings', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'put', put_Features_n_Pricing_org_body, 401)
        if (response.status != 200)
        {
           expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser ORGANISER_SETTINGS[Write|Read]:false - Verify the Admin Dashboard user is not able to read|write and verify the response: GET /api/v1/organisations/'+global.org_dash_signup_id+'/settings', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/settings', {'Content-Type':'application/json', /*'Accept':'application/json',*/ 'authorization':'Bearer '+global.admin_dashboard_user_etoken/*, 'buildversion':'1.2'*/}, 'get', '', 401)
        if (response.status != 200)
        {
           expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Certificates & Tokens[Write]:false - Super Admin updated the added Admin Dashboard role and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 1,
                    "code": "A-O-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 2,
                    "code": "A-O-ORGANISER_PROFILE",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 3,
                    "code": "A-O-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 4,
                    "code": "A-O-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 5,
                    "code": "A-O-ORGANISER_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 6,
                    "code": "A-O-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(1);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(2);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(3);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(4);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(5);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(6);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
 
            expect(response.body.data.permissions[6].permissionId).to.equal(7);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[7].permissionId).to.equal(8);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(9);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[9].permissionId).to.equal(10);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[10].permissionId).to.equal(11);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[11].permissionId).to.equal(12);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[12].permissionId).to.equal(13);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[13].permissionId).to.equal(14);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[14].permissionId).to.equal(15);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[15].permissionId).to.equal(16);
            expect(response.body.data.permissions[15].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[15].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[16].permissionId).to.equal(17);
            expect(response.body.data.permissions[16].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[16].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[17].permissionId).to.equal(18);
            expect(response.body.data.permissions[17].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[17].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[17].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[18].permissionId).to.equal(19);
            expect(response.body.data.permissions[18].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[18].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[18].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[19].permissionId).to.equal(20);
            expect(response.body.data.permissions[19].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[19].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[19].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[20].permissionId).to.equal(21);
            expect(response.body.data.permissions[20].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[20].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[20].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Organiser Certificates & Tokens[Read]:false - Super Admin updated the added Admin Dashboard role and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 1,
                    "code": "A-O-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 2,
                    "code": "A-O-ORGANISER_PROFILE",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 3,
                    "code": "A-O-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 4,
                    "code": "A-O-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 5,
                    "code": "A-O-ORGANISER_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 6,
                    "code": "A-O-CERTIFICATE_TOKEN",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(1);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(2);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Organiser_Profile_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(3);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(4);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(5);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Organiser_Settings_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(6);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_ORGANISATIONS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value);
 
            expect(response.body.data.permissions[6].permissionId).to.equal(7);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[7].permissionId).to.equal(8);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(9);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[9].permissionId).to.equal(10);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[10].permissionId).to.equal(11);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[11].permissionId).to.equal(12);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[12].permissionId).to.equal(13);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[13].permissionId).to.equal(14);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[14].permissionId).to.equal(15);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[15].permissionId).to.equal(16);
            expect(response.body.data.permissions[15].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[15].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[15].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[15].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[15].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[15].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[16].permissionId).to.equal(17);
            expect(response.body.data.permissions[16].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[16].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[16].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[16].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[16].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[16].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[17].permissionId).to.equal(18);
            expect(response.body.data.permissions[17].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[17].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[17].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[17].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[17].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[17].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[18].permissionId).to.equal(19);
            expect(response.body.data.permissions[18].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[18].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[18].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[18].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[18].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[18].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[19].permissionId).to.equal(20);
            expect(response.body.data.permissions[19].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[19].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[19].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[19].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[19].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[19].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[20].permissionId).to.equal(21);
            expect(response.body.data.permissions[20].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[20].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[20].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[20].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[20].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[20].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Disable ORGANISATIONS - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Disable ORGANISATIONS - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Disable ORGANISATIONS - Verify the registered org is present on the admin dashboard and verify the changes Organiser disable the entire ORGANISATIONS section: GET /backend/api/v1/organisations', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken /*, 'buildversion':'1.2'*/ },'get','', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Event Settings[Write]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Event Settings[Write]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Event Settings[Write]: false - Verify the Admin Dashboard user is not able to write and verify the response: PUT /backend/api/v1/events/event_id/info', async () => 
    {
        const   admin_dash_user_update_event_settings_body = 
        {
            "data": {
                "timezone_id": 1,
                "platform_template_id": null,
                "is_powered_by": 1,
                "type": "VIRTUAL",
                "opt_phy_meet": 0,
                "canHidePoweredBy": false,
                "is_linked_notification": 0,
                "start_time": global.org_dash_created_event_start_date__splitted+" 0:0",
                "end_time": global.org_dash_created_event_end_date__splitted+" 0:0",
                "is_cep_enabled": 0,
                "is_networking_lounge": 1,
                "is_webapp_multiskin_support": 1,
                "is_support_pre_recorded_live": 1,
                "is_product_tour": 1,
                "is_support_room_recording": "YES",
                "max_lounge_tables": 20,
                "is_exhibitor_table": "YES",
                "max_exhibitor_meetings": 100,
                "is_zoom_token": 0,
                "zoom_token": "",
                "adminAttendeeTableCapacityOptions": "2,4,8",
                "adminExhibitorTableCapacityOptions": "2,4,8",
                "adminSponsorTableCapacityOptions": "2,4",
                "adminLoungeVideoProvider": "AGORA",
                "adminMeetingProvider": "AGORA",
                "community_version": 2,
                "is_sponsor_table": "NO",
                "max_sponsor_meetings": 100,
                "is_single_device_login": 0,
                "is_zoom_popup": 0,
                "networking_slot_duration": 15,
                "is_new_exhibitor_list": 1,
                "is_exhibitor_central": 0,
                "exhibitor_product_image_label": "Product/Services",
                "sponsor_product_image_label": "Product/Services",
                "is_new_agenda_list": "YES",
                "is_mux": 1,
                "showMeetingFeedback": "YES",
                "showLoungeFeedback": "YES",
                "showRoomFeedback": "NO"
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/info', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', admin_dash_user_update_event_settings_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Event Settings[Read]: true - Verify the Admin Dashboard user is able to read and verify the response: GET /backend/api/v1/organisations/org_id/events/event_id/settings', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/settings', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.id).to.equal(global.org_dash_signup_event_id);
            expect(response.body.data.name).to.equal(global.org_dash_created_event_name);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Event Settings[Read|Write]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Event Settings[Read|Write]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Event Settings[Read|Write]: false - Verify the Admin Dashboard user is not able to write and verify the response: PUT /backend/api/v1/events/event_id/info', async () => 
    {
        const   admin_dash_user_update_event_settings_body = 
        {
            "data": {
                "timezone_id": 1,
                "platform_template_id": null,
                "is_powered_by": 1,
                "type": "VIRTUAL",
                "opt_phy_meet": 0,
                "canHidePoweredBy": false,
                "is_linked_notification": 0,
                "start_time": global.org_dash_created_event_start_date__splitted+" 0:0",
                "end_time": global.org_dash_created_event_end_date__splitted+" 0:0",
                "is_cep_enabled": 0,
                "is_networking_lounge": 1,
                "is_webapp_multiskin_support": 1,
                "is_support_pre_recorded_live": 1,
                "is_product_tour": 1,
                "is_support_room_recording": "YES",
                "max_lounge_tables": 20,
                "is_exhibitor_table": "YES",
                "max_exhibitor_meetings": 100,
                "is_zoom_token": 0,
                "zoom_token": "",
                "adminAttendeeTableCapacityOptions": "2,4,8",
                "adminExhibitorTableCapacityOptions": "2,4,8",
                "adminSponsorTableCapacityOptions": "2,4",
                "adminLoungeVideoProvider": "AGORA",
                "adminMeetingProvider": "AGORA",
                "community_version": 2,
                "is_sponsor_table": "NO",
                "max_sponsor_meetings": 100,
                "is_single_device_login": 0,
                "is_zoom_popup": 0,
                "networking_slot_duration": 15,
                "is_new_exhibitor_list": 1,
                "is_exhibitor_central": 0,
                "exhibitor_product_image_label": "Product/Services",
                "sponsor_product_image_label": "Product/Services",
                "is_new_agenda_list": "YES",
                "is_mux": 1,
                "showMeetingFeedback": "YES",
                "showLoungeFeedback": "YES",
                "showRoomFeedback": "NO"
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/info', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', admin_dash_user_update_event_settings_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Event Settings[Read|Write]: false - Verify the Admin Dashboard user is able to read and verify the response: GET /backend/api/v1/organisations/org_id/events/event_id/settings', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/settings', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get', '', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Fees & Commissions[Write]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Fees & Commissions[Write]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Fees & Commissions[Write]: false - Verify the Admin Dashboard user is not able to write and verify the response: PUT /backend/api/v1/events/event_id/fees', async () => 
    {
        absorb_razorpay_value = 2.5;
        pass_razorpay_value = 2.5641;
        razorpay_per_ticket_value = 0;
        absorb_stripe_value = 4.5;
        pass_stripe_value = 4.712;
        stripe_per_ticket_value = 1;

        const   admin_dash_user_update_Commissions_body = 
        {
            "data": {
                "absorb_razorpay": absorb_razorpay_value,
                "pass_razorpay": pass_razorpay_value,
                "razorpay_per_ticket": razorpay_per_ticket_value,
                "absorb_stripe": absorb_stripe_value,
                "pass_stripe": pass_stripe_value,
                "stripe_per_ticket": stripe_per_ticket_value
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/fees', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', admin_dash_user_update_Commissions_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Fees & Commissions[Read]: true - Verify the Admin Dashboard user is able to read and verify the response: GET /backend/api/v1/events/event_id/fees', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/fees', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);

            expect(response.body.data.absorb_razorpay).to.equal(absorb_razorpay_value);
            expect(response.body.data.pass_razorpay).to.equal(pass_razorpay_value);
            expect(response.body.data.razorpay_per_ticket).to.equal(razorpay_per_ticket_value);
            expect(response.body.data.absorb_stripe).to.equal(absorb_stripe_value);
            expect(response.body.data.pass_stripe).to.equal(pass_stripe_value);
            expect(response.body.data.stripe_per_ticket).to.equal(stripe_per_ticket_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Fees & Commissions[Read|Write]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Fees & Commissions[Read|Write]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Fees & Commissions[Read|Write]: false - Verify the Admin Dashboard user is not able to write and verify the response: PUT /backend/api/v1/events/event_id/fees', async () => 
    {
        absorb_razorpay_value = 2.5;
        pass_razorpay_value = 2.5641;
        razorpay_per_ticket_value = 0;
        absorb_stripe_value = 4.5;
        pass_stripe_value = 4.712;
        stripe_per_ticket_value = 1;

        global.absorb_razorpay_value;
        global.pass_razorpay_value;
        global.razorpay_per_ticket_value;
        global.absorb_stripe_value;
        global.pass_stripe_value;
        global.stripe_per_ticket_value;

        const   admin_dash_user_update_Commissions_body = 
        {
            "data": {
                "absorb_razorpay": absorb_razorpay_value,
                "pass_razorpay": pass_razorpay_value,
                "razorpay_per_ticket": razorpay_per_ticket_value,
                "absorb_stripe": absorb_stripe_value,
                "pass_stripe": pass_stripe_value,
                "stripe_per_ticket": stripe_per_ticket_value
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/fees', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', admin_dash_user_update_Commissions_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Fees & Commissions[Read|Write]: false - Verify the Admin Dashboard user is able to read and verify the response: GET /backend/api/v1/events/event_id/fees', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/fees', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get', '', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Delete]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Delete]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Write]: true - Added and store certain response data.: POST /backend/api/v1/events/event_id/transfers', async () => 
    {
        var today = new Date();
        var dd = String(today.getDate()).padStart(1, '0');
        var mm = String(today.getMonth() + 1).padStart(1, '0'); //January is 0!
        var yyyy = today.getFullYear();

        today = yyyy + '-' + mm + '-' + dd;

        global.today;

        transaction_id_value = "ABCD1234";

        const   admin_dash_user_add_ticketing_transfer_body = 
        {
            "data": {
                "currency_id": 1,
                "transfer_date": today,
                "amount": "100",
                "transaction_id": transaction_id_value
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_ticketing_transfer_body)
        if (response.status == 200)
        {
            global.admin_dash_added_ticket_transfer_ids = response.body.data.ids;
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Delete]: false - Deleting and validating the response message.: DELETE /backend/api/v1/events/event_id/transfers', async () => 
    {
        const   admin_dash_user_add_ticketing_transfer_body = 
        {
            "data": {
                "transfer_id": global.admin_dash_added_ticket_transfer_ids
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'delete', admin_dash_user_add_ticketing_transfer_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Read]: true - Added and store certain response data.: GET /backend/api/v1/events/event_id/transfers', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data[0].id).to.equal(global.admin_dash_added_ticket_transfer_ids);
            expect(response.body.data[0].event_id).to.equal(global.org_dash_signup_event_id);
            expect(response.body.data[0].transaction_id).to.equal(transaction_id_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Read]: true - Fetch and assert certain response data.: GET /backend/api/v1/events/currencies', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/currencies', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);

            expect(response.body.data[0].id).to.equal(1);
            expect(response.body.data[0].name).to.equal("Rupees");
            expect(response.body.data[0].currency).to.equal("INR");
            expect(response.body.data[0].country).to.equal("India");
            expect(response.body.data[0].currency_unicode).to.equal("₹");
            expect(response.body.data[0].razorpay_support).to.equal(1);
            expect(response.body.data[0].stripe_support).to.equal(1);
            expect(response.body.data[0].paypal_support).to.equal(0);
            expect(response.body.data[0].transfer_support).to.equal(0);
            expect(response.body.data[0].position).to.equal(11);

            expect(response.body.data[1].id).to.equal(2);
            expect(response.body.data[1].name).to.equal("Dollars");
            expect(response.body.data[1].currency).to.equal("USD");
            expect(response.body.data[1].country).to.equal("United States of America");
            expect(response.body.data[1].currency_unicode).to.equal("$");
            expect(response.body.data[1].razorpay_support).to.equal(0);
            expect(response.body.data[1].stripe_support).to.equal(1);
            expect(response.body.data[1].paypal_support).to.equal(0);
            expect(response.body.data[1].transfer_support).to.equal(1);
            expect(response.body.data[1].position).to.equal(24);

            expect(response.body.data[2].id).to.equal(125);
            expect(response.body.data[2].name).to.equal("Australian Dollar");
            expect(response.body.data[2].currency).to.equal("AUD");
            expect(response.body.data[2].country).to.equal("Australia");
            expect(response.body.data[2].currency_unicode).to.equal("A$");
            expect(response.body.data[2].razorpay_support).to.equal(0);
            expect(response.body.data[2].stripe_support).to.equal(1);
            expect(response.body.data[2].paypal_support).to.equal(0);
            expect(response.body.data[2].transfer_support).to.equal(1);
            expect(response.body.data[2].position).to.equal(1);

            expect(response.body.data[3].id).to.equal(128);
            expect(response.body.data[3].name).to.equal("Canadian Dollar");
            expect(response.body.data[3].currency).to.equal("CAD");
            expect(response.body.data[3].country).to.equal("Canada");
            expect(response.body.data[3].currency_unicode).to.equal("C$");
            expect(response.body.data[3].razorpay_support).to.equal(0);
            expect(response.body.data[3].stripe_support).to.equal(1);
            expect(response.body.data[3].paypal_support).to.equal(0);
            expect(response.body.data[3].transfer_support).to.equal(0);
            expect(response.body.data[3].position).to.equal(4);

            expect(response.body.data[4].id).to.equal(129);
            expect(response.body.data[4].name).to.equal("krone");
            expect(response.body.data[4].currency).to.equal("DKK");
            expect(response.body.data[4].country).to.equal("Denmark");
            expect(response.body.data[4].currency_unicode).to.equal("Kr");
            expect(response.body.data[4].razorpay_support).to.equal(0);
            expect(response.body.data[4].stripe_support).to.equal(1);
            expect(response.body.data[4].paypal_support).to.equal(0);
            expect(response.body.data[4].transfer_support).to.equal(0);
            expect(response.body.data[4].position).to.equal(5);

            expect(response.body.data[5].id).to.equal(131);
            expect(response.body.data[5].name).to.equal("Euro");
            expect(response.body.data[5].currency).to.equal("EUR");
            expect(response.body.data[5].country).to.equal("Europe");
            expect(response.body.data[5].currency_unicode).to.equal("€");
            expect(response.body.data[5].razorpay_support).to.equal(0);
            expect(response.body.data[5].stripe_support).to.equal(1);
            expect(response.body.data[5].paypal_support).to.equal(0);
            expect(response.body.data[5].transfer_support).to.equal(0);
            expect(response.body.data[5].position).to.equal(7);

            expect(response.body.data[6].id).to.equal(133);
            expect(response.body.data[6].name).to.equal("Hong Kong Dollar");
            expect(response.body.data[6].currency).to.equal("HKD");
            expect(response.body.data[6].country).to.equal("Hong Kong");
            expect(response.body.data[6].currency_unicode).to.equal("HK$");
            expect(response.body.data[6].razorpay_support).to.equal(0);
            expect(response.body.data[6].stripe_support).to.equal(1);
            expect(response.body.data[6].paypal_support).to.equal(0);
            expect(response.body.data[6].transfer_support).to.equal(0);
            expect(response.body.data[6].position).to.equal(9);

            expect(response.body.data[7].id).to.equal(136);
            expect(response.body.data[7].name).to.equal("Japanese Yen");
            expect(response.body.data[7].currency).to.equal("JPY");
            expect(response.body.data[7].country).to.equal("Japan");
            expect(response.body.data[7].currency_unicode).to.equal("¥");
            expect(response.body.data[7].razorpay_support).to.equal(0);
            expect(response.body.data[7].stripe_support).to.equal(0);
            expect(response.body.data[7].paypal_support).to.equal(0);
            expect(response.body.data[7].transfer_support).to.equal(0);
            expect(response.body.data[7].position).to.equal(13);

            expect(response.body.data[8].id).to.equal(139);
            expect(response.body.data[8].name).to.equal("New Zealand Dollars");
            expect(response.body.data[8].currency).to.equal("NZD");
            expect(response.body.data[8].country).to.equal("New Zealand");
            expect(response.body.data[8].currency_unicode).to.equal("NZ$");
            expect(response.body.data[8].razorpay_support).to.equal(0);
            expect(response.body.data[8].stripe_support).to.equal(1);
            expect(response.body.data[8].paypal_support).to.equal(0);
            expect(response.body.data[8].transfer_support).to.equal(0);
            expect(response.body.data[8].position).to.equal(16);

            expect(response.body.data[9].id).to.equal(140);
            expect(response.body.data[9].name).to.equal("Norwegian Krone");
            expect(response.body.data[9].currency).to.equal("NOK");
            expect(response.body.data[9].country).to.equal("Norway");
            expect(response.body.data[9].currency_unicode).to.equal("Kr");
            expect(response.body.data[9].razorpay_support).to.equal(0);
            expect(response.body.data[9].stripe_support).to.equal(1);
            expect(response.body.data[9].paypal_support).to.equal(0);
            expect(response.body.data[9].transfer_support).to.equal(0);
            expect(response.body.data[9].position).to.equal(17);

            expect(response.body.data[10].id).to.equal(142);
            expect(response.body.data[10].name).to.equal("Singapore Dollar");
            expect(response.body.data[10].currency).to.equal("SGD");
            expect(response.body.data[10].country).to.equal("Singapore");
            expect(response.body.data[10].currency_unicode).to.equal("S$");
            expect(response.body.data[10].razorpay_support).to.equal(0);
            expect(response.body.data[10].stripe_support).to.equal(1);
            expect(response.body.data[10].paypal_support).to.equal(0);
            expect(response.body.data[10].transfer_support).to.equal(0);
            expect(response.body.data[10].position).to.equal(19);

            expect(response.body.data[11].id).to.equal(144);
            expect(response.body.data[11].name).to.equal("Swedish Krona");
            expect(response.body.data[11].currency).to.equal("SEK");
            expect(response.body.data[11].country).to.equal("Sweden");
            expect(response.body.data[11].currency_unicode).to.equal("Kr");
            expect(response.body.data[11].razorpay_support).to.equal(0);
            expect(response.body.data[11].stripe_support).to.equal(1);
            expect(response.body.data[11].paypal_support).to.equal(0);
            expect(response.body.data[11].transfer_support).to.equal(0);
            expect(response.body.data[11].position).to.equal(21);

            expect(response.body.data[12].id).to.equal(145);
            expect(response.body.data[12].name).to.equal("Swiss Franc");
            expect(response.body.data[12].currency).to.equal("CHF");
            expect(response.body.data[12].country).to.equal("Switzerland");
            expect(response.body.data[12].currency_unicode).to.equal("Fr");
            expect(response.body.data[12].razorpay_support).to.equal(0);
            expect(response.body.data[12].stripe_support).to.equal(1);
            expect(response.body.data[12].paypal_support).to.equal(0);
            expect(response.body.data[12].transfer_support).to.equal(0);
            expect(response.body.data[12].position).to.equal(22);

            expect(response.body.data[13].id).to.equal(146);
            expect(response.body.data[13].name).to.equal("Pound Sterling");
            expect(response.body.data[13].currency).to.equal("GBP");
            expect(response.body.data[13].country).to.equal("United Kingdom");
            expect(response.body.data[13].currency_unicode).to.equal("£");
            expect(response.body.data[13].razorpay_support).to.equal(0);
            expect(response.body.data[13].stripe_support).to.equal(1);
            expect(response.body.data[13].paypal_support).to.equal(1);
            expect(response.body.data[13].transfer_support).to.equal(0);
            expect(response.body.data[13].position).to.equal(23);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Write|Delete]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Write|Delete]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Delete]: false - Deleting and validating the response message.: DELETE /backend/api/v1/events/event_id/transfers', async () => 
    {
        const   admin_dash_user_add_ticketing_transfer_body = 
        {
            "data": {
                "transfer_id": global.admin_dash_added_ticket_transfer_ids
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'delete', admin_dash_user_add_ticketing_transfer_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Write]: false - Added and store certain response data.: POST /backend/api/v1/events/event_id/transfers', async () => 
    {
        var today = new Date();
        var dd = String(today.getDate()).padStart(1, '0');
        var mm = String(today.getMonth() + 1).padStart(1, '0'); //January is 0!
        var yyyy = today.getFullYear();

        today = yyyy + '-' + mm + '-' + dd;

        global.today;

        transaction_id_value = "ABCD1234";

        const   admin_dash_user_add_ticketing_transfer_body = 
        {
            "data": {
                "currency_id": 1,
                "transfer_date": today,
                "amount": "100",
                "transaction_id": transaction_id_value
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_ticketing_transfer_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Read]: true - Added and store certain response data.: GET /backend/api/v1/events/event_id/transfers', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data[0].id).to.equal(global.admin_dash_added_ticket_transfer_ids);
            expect(response.body.data[0].event_id).to.equal(global.org_dash_signup_event_id);
            expect(response.body.data[0].transaction_id).to.equal(transaction_id_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Read]: true - Fetch and assert certain response data.: GET /backend/api/v1/events/currencies', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/currencies', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);

            expect(response.body.data[0].id).to.equal(1);
            expect(response.body.data[0].name).to.equal("Rupees");
            expect(response.body.data[0].currency).to.equal("INR");
            expect(response.body.data[0].country).to.equal("India");
            expect(response.body.data[0].currency_unicode).to.equal("₹");
            expect(response.body.data[0].razorpay_support).to.equal(1);
            expect(response.body.data[0].stripe_support).to.equal(1);
            expect(response.body.data[0].paypal_support).to.equal(0);
            expect(response.body.data[0].transfer_support).to.equal(0);
            expect(response.body.data[0].position).to.equal(11);

            expect(response.body.data[1].id).to.equal(2);
            expect(response.body.data[1].name).to.equal("Dollars");
            expect(response.body.data[1].currency).to.equal("USD");
            expect(response.body.data[1].country).to.equal("United States of America");
            expect(response.body.data[1].currency_unicode).to.equal("$");
            expect(response.body.data[1].razorpay_support).to.equal(0);
            expect(response.body.data[1].stripe_support).to.equal(1);
            expect(response.body.data[1].paypal_support).to.equal(0);
            expect(response.body.data[1].transfer_support).to.equal(1);
            expect(response.body.data[1].position).to.equal(24);

            expect(response.body.data[2].id).to.equal(125);
            expect(response.body.data[2].name).to.equal("Australian Dollar");
            expect(response.body.data[2].currency).to.equal("AUD");
            expect(response.body.data[2].country).to.equal("Australia");
            expect(response.body.data[2].currency_unicode).to.equal("A$");
            expect(response.body.data[2].razorpay_support).to.equal(0);
            expect(response.body.data[2].stripe_support).to.equal(1);
            expect(response.body.data[2].paypal_support).to.equal(0);
            expect(response.body.data[2].transfer_support).to.equal(1);
            expect(response.body.data[2].position).to.equal(1);

            expect(response.body.data[3].id).to.equal(128);
            expect(response.body.data[3].name).to.equal("Canadian Dollar");
            expect(response.body.data[3].currency).to.equal("CAD");
            expect(response.body.data[3].country).to.equal("Canada");
            expect(response.body.data[3].currency_unicode).to.equal("C$");
            expect(response.body.data[3].razorpay_support).to.equal(0);
            expect(response.body.data[3].stripe_support).to.equal(1);
            expect(response.body.data[3].paypal_support).to.equal(0);
            expect(response.body.data[3].transfer_support).to.equal(0);
            expect(response.body.data[3].position).to.equal(4);

            expect(response.body.data[4].id).to.equal(129);
            expect(response.body.data[4].name).to.equal("krone");
            expect(response.body.data[4].currency).to.equal("DKK");
            expect(response.body.data[4].country).to.equal("Denmark");
            expect(response.body.data[4].currency_unicode).to.equal("Kr");
            expect(response.body.data[4].razorpay_support).to.equal(0);
            expect(response.body.data[4].stripe_support).to.equal(1);
            expect(response.body.data[4].paypal_support).to.equal(0);
            expect(response.body.data[4].transfer_support).to.equal(0);
            expect(response.body.data[4].position).to.equal(5);

            expect(response.body.data[5].id).to.equal(131);
            expect(response.body.data[5].name).to.equal("Euro");
            expect(response.body.data[5].currency).to.equal("EUR");
            expect(response.body.data[5].country).to.equal("Europe");
            expect(response.body.data[5].currency_unicode).to.equal("€");
            expect(response.body.data[5].razorpay_support).to.equal(0);
            expect(response.body.data[5].stripe_support).to.equal(1);
            expect(response.body.data[5].paypal_support).to.equal(0);
            expect(response.body.data[5].transfer_support).to.equal(0);
            expect(response.body.data[5].position).to.equal(7);

            expect(response.body.data[6].id).to.equal(133);
            expect(response.body.data[6].name).to.equal("Hong Kong Dollar");
            expect(response.body.data[6].currency).to.equal("HKD");
            expect(response.body.data[6].country).to.equal("Hong Kong");
            expect(response.body.data[6].currency_unicode).to.equal("HK$");
            expect(response.body.data[6].razorpay_support).to.equal(0);
            expect(response.body.data[6].stripe_support).to.equal(1);
            expect(response.body.data[6].paypal_support).to.equal(0);
            expect(response.body.data[6].transfer_support).to.equal(0);
            expect(response.body.data[6].position).to.equal(9);

            expect(response.body.data[7].id).to.equal(136);
            expect(response.body.data[7].name).to.equal("Japanese Yen");
            expect(response.body.data[7].currency).to.equal("JPY");
            expect(response.body.data[7].country).to.equal("Japan");
            expect(response.body.data[7].currency_unicode).to.equal("¥");
            expect(response.body.data[7].razorpay_support).to.equal(0);
            expect(response.body.data[7].stripe_support).to.equal(0);
            expect(response.body.data[7].paypal_support).to.equal(0);
            expect(response.body.data[7].transfer_support).to.equal(0);
            expect(response.body.data[7].position).to.equal(13);

            expect(response.body.data[8].id).to.equal(139);
            expect(response.body.data[8].name).to.equal("New Zealand Dollars");
            expect(response.body.data[8].currency).to.equal("NZD");
            expect(response.body.data[8].country).to.equal("New Zealand");
            expect(response.body.data[8].currency_unicode).to.equal("NZ$");
            expect(response.body.data[8].razorpay_support).to.equal(0);
            expect(response.body.data[8].stripe_support).to.equal(1);
            expect(response.body.data[8].paypal_support).to.equal(0);
            expect(response.body.data[8].transfer_support).to.equal(0);
            expect(response.body.data[8].position).to.equal(16);

            expect(response.body.data[9].id).to.equal(140);
            expect(response.body.data[9].name).to.equal("Norwegian Krone");
            expect(response.body.data[9].currency).to.equal("NOK");
            expect(response.body.data[9].country).to.equal("Norway");
            expect(response.body.data[9].currency_unicode).to.equal("Kr");
            expect(response.body.data[9].razorpay_support).to.equal(0);
            expect(response.body.data[9].stripe_support).to.equal(1);
            expect(response.body.data[9].paypal_support).to.equal(0);
            expect(response.body.data[9].transfer_support).to.equal(0);
            expect(response.body.data[9].position).to.equal(17);

            expect(response.body.data[10].id).to.equal(142);
            expect(response.body.data[10].name).to.equal("Singapore Dollar");
            expect(response.body.data[10].currency).to.equal("SGD");
            expect(response.body.data[10].country).to.equal("Singapore");
            expect(response.body.data[10].currency_unicode).to.equal("S$");
            expect(response.body.data[10].razorpay_support).to.equal(0);
            expect(response.body.data[10].stripe_support).to.equal(1);
            expect(response.body.data[10].paypal_support).to.equal(0);
            expect(response.body.data[10].transfer_support).to.equal(0);
            expect(response.body.data[10].position).to.equal(19);

            expect(response.body.data[11].id).to.equal(144);
            expect(response.body.data[11].name).to.equal("Swedish Krona");
            expect(response.body.data[11].currency).to.equal("SEK");
            expect(response.body.data[11].country).to.equal("Sweden");
            expect(response.body.data[11].currency_unicode).to.equal("Kr");
            expect(response.body.data[11].razorpay_support).to.equal(0);
            expect(response.body.data[11].stripe_support).to.equal(1);
            expect(response.body.data[11].paypal_support).to.equal(0);
            expect(response.body.data[11].transfer_support).to.equal(0);
            expect(response.body.data[11].position).to.equal(21);

            expect(response.body.data[12].id).to.equal(145);
            expect(response.body.data[12].name).to.equal("Swiss Franc");
            expect(response.body.data[12].currency).to.equal("CHF");
            expect(response.body.data[12].country).to.equal("Switzerland");
            expect(response.body.data[12].currency_unicode).to.equal("Fr");
            expect(response.body.data[12].razorpay_support).to.equal(0);
            expect(response.body.data[12].stripe_support).to.equal(1);
            expect(response.body.data[12].paypal_support).to.equal(0);
            expect(response.body.data[12].transfer_support).to.equal(0);
            expect(response.body.data[12].position).to.equal(22);

            expect(response.body.data[13].id).to.equal(146);
            expect(response.body.data[13].name).to.equal("Pound Sterling");
            expect(response.body.data[13].currency).to.equal("GBP");
            expect(response.body.data[13].country).to.equal("United Kingdom");
            expect(response.body.data[13].currency_unicode).to.equal("£");
            expect(response.body.data[13].razorpay_support).to.equal(0);
            expect(response.body.data[13].stripe_support).to.equal(1);
            expect(response.body.data[13].paypal_support).to.equal(1);
            expect(response.body.data[13].transfer_support).to.equal(0);
            expect(response.body.data[13].position).to.equal(23);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Read|Write|Delete]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Read|Write|Delete]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Delete]: false - Deleting and validating the response message.: DELETE /backend/api/v1/events/event_id/transfers', async () => 
    {
        const   admin_dash_user_add_ticketing_transfer_body = 
        {
            "data": {
                "transfer_id": global.admin_dash_added_ticket_transfer_ids
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'delete', admin_dash_user_add_ticketing_transfer_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Write]: false - Added and store certain response data.: POST /backend/api/v1/events/event_id/transfers', async () => 
    {
        var today = new Date();
        var dd = String(today.getDate()).padStart(1, '0');
        var mm = String(today.getMonth() + 1).padStart(1, '0'); //January is 0!
        var yyyy = today.getFullYear();

        today = yyyy + '-' + mm + '-' + dd;

        global.today;

        transaction_id_value = "ABCD1234";

        const   admin_dash_user_add_ticketing_transfer_body = 
        {
            "data": {
                "currency_id": 1,
                "transfer_date": today,
                "amount": "100",
                "transaction_id": transaction_id_value
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_ticketing_transfer_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Read]: false - Added and store certain response data.: GET /backend/api/v1/events/event_id/transfers', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/transfers', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get', '', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Ticketing Transfer[Read]: false - Fetch and assert certain response data.: GET /backend/api/v1/events/currencies', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/currencies', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get', '', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Features & Pricing[Write]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Features & Pricing[Write]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Features & Pricing[Write]: false - Write and validating the response message.: PUT /backend/api/v1/organisations/org_id/events/event_id/pricing', async () => 
    {
        const   admin_dash_user_Features_Pricing_body = 
        {
            "data": {
                "features": [
                    {
                        "id": 1,
                        "name": "Event Website",
                        "price": 0,
                        "icon": "website_gray.svg",
                        "hoverIcon": "website_icon.svg",
                        "licenceDateId": 1,
                        "isPaid": false,
                        "showGlobalPrice": 1,
                        "packagesCount": 2,
                        "packages": [
                            {
                                "id": 2,
                                "name": "Single Page",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            },
                            {
                                "id": 3,
                                "name": "Multiple Page",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            }
                        ],
                        "isSelected": false
                    },
                    {
                        "id": 2,
                        "name": "Event App",
                        "price": 0,
                        "icon": "App_2_gray.svg",
                        "hoverIcon": "App_2.svg",
                        "licenceDateId": 1,
                        "isPaid": false,
                        "showGlobalPrice": 0,
                        "packagesCount": 3,
                        "packages": [
                            {
                                "id": 4,
                                "name": "Branded App",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            },
                            {
                                "id": 5,
                                "name": "Multi Event App",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            },
                            {
                                "id": 14,
                                "name": "Hubilo App",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            }
                        ],
                        "isSelected": false
                    },
                    {
                        "id": 3,
                        "name": "Networking",
                        "price": 0,
                        "icon": "networking_icon_gray.svg",
                        "hoverIcon": "networking_icon.svg",
                        "licenceDateId": 1,
                        "isPaid": true,
                        "showGlobalPrice": 1,
                        "packagesCount": 1,
                        "packages": [
                            {
                                "id": 8,
                                "name": "Standard",
                                "licenceDateId": 1,
                                "isSelected": true,
                                "price": 0
                            }
                        ],
                        "isSelected": true
                    },
                    {
                        "id": 4,
                        "name": "Event Registration",
                        "price": 0,
                        "icon": "Reg_icon_gray.svg",
                        "hoverIcon": "Reg_icon.svg",
                        "licenceDateId": 1,
                        "isPaid": true,
                        "showGlobalPrice": 1,
                        "packagesCount": 1,
                        "packages": [
                            {
                                "id": 9,
                                "name": "Ticketing & Forms",
                                "licenceDateId": 1,
                                "isSelected": true,
                                "price": 0
                            }
                        ],
                        "isSelected": true
                    }
                ]
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/pricing', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', admin_dash_user_Features_Pricing_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Features & Pricing[Read]: true - Read and validating the response message.: GET /backend/api/v1/organisations/org_id/events/event_id/pricing', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/pricing', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.features[0].name).to.equal("Event Website");

            expect(response.body.data.features[1].name).to.equal("Event App");

            expect(response.body.data.features[2].name).to.equal("Networking");

            expect(response.body.data.features[3].name).to.equal("Event Registration");

            expect(response.body.data.licence_date_list[0].id).to.equal(1);
            expect(response.body.data.licence_date_list[0].name).to.equal(Responsemessages.parameter_1_Year_as_value);

            expect(response.body.data.licence_date_list[1].id).to.equal(2);
            expect(response.body.data.licence_date_list[1].name).to.equal(Responsemessages.parameter_2_Years_as_value);

            expect(response.body.data.licence_date_list[2].id).to.equal(3);
            expect(response.body.data.licence_date_list[2].name).to.equal(Responsemessages.parameter_3_Years_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Features & Pricing[Read|Write]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Features & Pricing[Read|Write]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Features & Pricing[Read|Write]: false - Write and validating the response message.: PUT /backend/api/v1/organisations/org_id/events/event_id/pricing', async () => 
    {
        const   admin_dash_user_Features_Pricing_body = 
        {
            "data": {
                "features": [
                    {
                        "id": 1,
                        "name": "Event Website",
                        "price": 0,
                        "icon": "website_gray.svg",
                        "hoverIcon": "website_icon.svg",
                        "licenceDateId": 1,
                        "isPaid": false,
                        "showGlobalPrice": 1,
                        "packagesCount": 2,
                        "packages": [
                            {
                                "id": 2,
                                "name": "Single Page",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            },
                            {
                                "id": 3,
                                "name": "Multiple Page",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            }
                        ],
                        "isSelected": false
                    },
                    {
                        "id": 2,
                        "name": "Event App",
                        "price": 0,
                        "icon": "App_2_gray.svg",
                        "hoverIcon": "App_2.svg",
                        "licenceDateId": 1,
                        "isPaid": false,
                        "showGlobalPrice": 0,
                        "packagesCount": 3,
                        "packages": [
                            {
                                "id": 4,
                                "name": "Branded App",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            },
                            {
                                "id": 5,
                                "name": "Multi Event App",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            },
                            {
                                "id": 14,
                                "name": "Hubilo App",
                                "licenceDateId": 1,
                                "isSelected": false,
                                "price": 0
                            }
                        ],
                        "isSelected": false
                    },
                    {
                        "id": 3,
                        "name": "Networking",
                        "price": 0,
                        "icon": "networking_icon_gray.svg",
                        "hoverIcon": "networking_icon.svg",
                        "licenceDateId": 1,
                        "isPaid": true,
                        "showGlobalPrice": 1,
                        "packagesCount": 1,
                        "packages": [
                            {
                                "id": 8,
                                "name": "Standard",
                                "licenceDateId": 1,
                                "isSelected": true,
                                "price": 0
                            }
                        ],
                        "isSelected": true
                    },
                    {
                        "id": 4,
                        "name": "Event Registration",
                        "price": 0,
                        "icon": "Reg_icon_gray.svg",
                        "hoverIcon": "Reg_icon.svg",
                        "licenceDateId": 1,
                        "isPaid": true,
                        "showGlobalPrice": 1,
                        "packagesCount": 1,
                        "packages": [
                            {
                                "id": 9,
                                "name": "Ticketing & Forms",
                                "licenceDateId": 1,
                                "isSelected": true,
                                "price": 0
                            }
                        ],
                        "isSelected": true
                    }
                ]
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/pricing', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', admin_dash_user_Features_Pricing_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Features & Pricing[Read|Write]: false - Read and validating the response message.: GET /backend/api/v1/organisations/org_id/events/event_id/pricing', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/pricing', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get','', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Delete]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Delete]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Write]: true - Added and store certain response data.: POST /backend/api/v1/organisations/org_id/events/event_id/discount', async () => 
    {
        var today = new Date();
        var dd = String(today.getDate()).padStart(1, '0');
        var mm = String(today.getMonth() + 1).padStart(1, '0'); //January is 0!
        var yyyy = today.getFullYear();
        today = yyyy + '-' + mm + '-' + dd;
        global.today;
        coupon_code_name_value = casual.word

        const   admin_dash_user_add_Coupon_Codes_body = 
        {
            "data": {
                "organiser_id": global.org_dash_signup_id,
                "event_id": global.org_dash_signup_event_id,
                "coupon_code_name": coupon_code_name_value,
                "organiser_discount_type_id": 1,
                "organiser_discount_validity_type_id": 1,
                "value": 1,
                "maximum_value": 0,
                "number_of_uses": 1,
                "expire_time": global.today+" 12:0"
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/discount', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_Coupon_Codes_body)
        if (response.status == 200)
        {
            global.admin_dash_added_Coupon_Codes_ids = response.body.data.ids;
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Delete]: false - Deleting and validating the response message.: DELETE /backend/api/v1/organisations/org_id/events/event_id/discount/admin_dash_added_Coupon_Codes_ids', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/discount/'+global.admin_dash_added_Coupon_Codes_ids, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'delete','', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Read]: true - Read and validating the response message.: GET /backend/api/v1/events/event_id/discount', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/discount', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.couponList[0].id).to.equal(global.admin_dash_added_Coupon_Codes_ids);
            expect(response.body.data.couponList[0].organiser_id).to.equal(global.org_dash_signup_id);
            expect(response.body.data.couponList[0].event_id).to.equal(global.org_dash_signup_event_id);
            expect(response.body.data.couponList[0].coupon_code_name).to.equal(coupon_code_name_value);

            expect(response.body.data.organiserDiscountType[0].id).to.equal(1);
            expect(response.body.data.organiserDiscountType[0].name).to.equal("Percentage");

            expect(response.body.data.organiserDiscountType[1].id).to.equal(2);
            expect(response.body.data.organiserDiscountType[1].name).to.equal("Amount");

            expect(response.body.data.organiserDiscountValidityType[0].id).to.equal(1);
            expect(response.body.data.organiserDiscountValidityType[0].name).to.equal("Limited");

            expect(response.body.data.organiserDiscountValidityType[1].id).to.equal(2);
            expect(response.body.data.organiserDiscountValidityType[1].name).to.equal("Unlimited");
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Write]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Write]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Write]: false - Added and store certain response data.: POST /backend/api/v1/organisations/org_id/events/event_id/discount', async () => 
    {
        var today = new Date();
        var dd = String(today.getDate()).padStart(1, '0');
        var mm = String(today.getMonth() + 1).padStart(1, '0'); //January is 0!
        var yyyy = today.getFullYear();
        today = yyyy + '-' + mm + '-' + dd;
        global.today;

        const   admin_dash_user_add_Coupon_Codes_body = 
        {
            "data": {
                "organiser_id": global.org_dash_signup_id,
                "event_id": global.org_dash_signup_event_id,
                "coupon_code_name": casual.word,
                "organiser_discount_type_id": 1,
                "organiser_discount_validity_type_id": 1,
                "value": 1,
                "maximum_value": 0,
                "number_of_uses": 1,
                "expire_time": global.today+" 12:0"
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/discount', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_Coupon_Codes_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Delete]: false - Deleting and validating the response message.: DELETE /backend/api/v1/organisations/org_id/events/event_id/discount/admin_dash_added_Coupon_Codes_ids', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/discount/'+global.admin_dash_added_Coupon_Codes_ids, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'delete','', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Read]: true - Read and validating the response message.: GET /backend/api/v1/events/event_id/discount', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/discount', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.couponList[0].id).to.equal(global.admin_dash_added_Coupon_Codes_ids);
            expect(response.body.data.couponList[0].organiser_id).to.equal(global.org_dash_signup_id);
            expect(response.body.data.couponList[0].event_id).to.equal(global.org_dash_signup_event_id);
            expect(response.body.data.couponList[0].coupon_code_name).to.equal(coupon_code_name_value);

            expect(response.body.data.organiserDiscountType[0].id).to.equal(1);
            expect(response.body.data.organiserDiscountType[0].name).to.equal("Percentage");

            expect(response.body.data.organiserDiscountType[1].id).to.equal(2);
            expect(response.body.data.organiserDiscountType[1].name).to.equal("Amount");

            expect(response.body.data.organiserDiscountValidityType[0].id).to.equal(1);
            expect(response.body.data.organiserDiscountValidityType[0].name).to.equal("Limited");

            expect(response.body.data.organiserDiscountValidityType[1].id).to.equal(2);
            expect(response.body.data.organiserDiscountValidityType[1].name).to.equal("Unlimited");
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Read]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Read]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Write]: false - Added and store certain response data.: POST /backend/api/v1/organisations/org_id/events/event_id/discount', async () => 
    {
        var today = new Date();
        var dd = String(today.getDate()).padStart(1, '0');
        var mm = String(today.getMonth() + 1).padStart(1, '0'); //January is 0!
        var yyyy = today.getFullYear();
        today = yyyy + '-' + mm + '-' + dd;
        global.today;

        const   admin_dash_user_add_Coupon_Codes_body = 
        {
            "data": {
                "organiser_id": global.org_dash_signup_id,
                "event_id": global.org_dash_signup_event_id,
                "coupon_code_name": casual.word,
                "organiser_discount_type_id": 1,
                "organiser_discount_validity_type_id": 1,
                "value": 1,
                "maximum_value": 0,
                "number_of_uses": 1,
                "expire_time": global.today+" 12:0"
            }
        }

        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/discount', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_Coupon_Codes_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Delete]: false - Deleting and validating the response message.: DELETE /backend/api/v1/organisations/org_id/events/event_id/discount/admin_dash_added_Coupon_Codes_ids', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/discount/'+global.admin_dash_added_Coupon_Codes_ids, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'delete','', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Coupon Codes[Read]: false - Read and validating the response message.: GET /backend/api/v1/events/event_id/discount', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events/'+global.org_dash_signup_event_id+'/discount', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get', '', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Session Streams[Read]: false - Fetch and verify response data: GET /backend/api/v1/organisations/org_id/events/event_id/sessions', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            global.admin_dash_rtmp_url = response.body.data.session_stream_data[0].rtmp_url;
            global.admin_dash_stream_key = response.body.data.session_stream_data[0].stream_key;
            global.admin_dash_stream_url = response.body.data.session_stream_data[0].stream_link;
            global.admin_dash_player_meta_type_id = response.body.data.session_stream_data[0].player_meta_type_id;
            global.admin_dash_player_player_type_id = response.body.data.session_stream_data[0].player_type_id;
            global.admin_dash_player_source_id = response.body.data.session_stream_data[0].rtmp_source_id;

            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.session_stream_data[0].id).to.equal(global.org_dash_added_session_id);
            expect(response.body.data.session_stream_data[0].name).to.equal(global.org_dash_add_agenda_title);
            expect(response.body.data.webinar_host_list[0].id).to.equal(global.third_Party_Zoom_Integration_ids);
            expect(response.body.data.webinar_host_list[0].first_name).to.equal(global.srinivas_fname);
            expect(response.body.data.webinar_host_list[0].last_name).to.equal(global.srinivas_lname);
        }
        else
        {
            console.log("The Events Session Streams[Read]: false failed response is:", response.body)
        }
    })

    it.only('Events Session Streams[Read]: false - Fetch to edit and verify response data: GET /backend/api/v1/organisations/org_id/events/event_id/sessions/session_id', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions/'+global.org_dash_added_session_id, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            global.admin_dash_rtmp_url_try_edit = response.body.data.rtmp_url;
            global.admin_dash_stream_key_try_edit = response.body.data.stream_key;
            global.admin_dash_stream_url_try_edit = response.body.data.stream_link;
            global.admin_dash_player_meta_type_id_try_edit = response.body.data.player_meta_type_id;
            global.admin_dash_player_player_type_id_try_edit = response.body.data.player_type_id;
            global.admin_dash_player_source_id_try_edit = response.body.data.rtmp_source_id;

            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.id).to.equal(global.org_dash_added_session_id);
            expect(response.body.data.name).to.equal(global.org_dash_add_agenda_title);

            expect(response.body.data.rtmp_source_id).to.equal(global.admin_dash_player_source_id);
            expect(response.body.data.player_type_id).to.equal(global.admin_dash_player_player_type_id);
            expect(response.body.data.player_meta_type_id).to.equal(global.admin_dash_player_meta_type_id);
            expect(response.body.data.stream_link).to.equal(global.admin_dash_stream_url);
            expect(response.body.data.stream_key).to.equal(global.admin_dash_stream_key);
            expect(response.body.data.rtmp_url).to.equal(global.admin_dash_rtmp_url);

        }
        else
        {
            console.log("The Events Session Streams[Read]: false - Fetch to edit failed response is:", response.body)
        }
    })

    it.only('Events Session Streams[Write]: false - Update and verify response data: PUT /backend/api/v1/organisations/org_id/events/event_id/sessions/session_id', async () => 
    {
        const   org_dash_session_streaming_update_body = 
        {
            "data": {
                "host_id": null,
                "source_id": global.admin_dash_player_source_id_try_edit,
                "rtmp_url": global.admin_dash_rtmp_url_try_edit,
                "stream_key": global.admin_dash_stream_key_try_edit,
                "stream_url": global.admin_dash_stream_url_try_edit,
                "player_type_id": global.admin_dash_player_player_type_id_try_edit,
                "player_meta_type_id": global.admin_dash_player_meta_type_id_try_edit,
                "player_meta_data": ""
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions/'+global.org_dash_added_session_id, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', org_dash_session_streaming_update_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The Session Streams[Write]: false - Update failed response is:", response.body)
        }
    })

    it.only('Events Session Streams[Read]: false - Refresh and verify response data: POST /backend/api/v1/organisations/org_id/events/event_id/sessions/session_id/refresh', async () => 
    {
        const   org_dash_session_streaming_refresh_body = 
        {
            "data": {
                "email": global.user_email_id
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions/'+global.org_dash_added_session_id+'/refresh', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', org_dash_session_streaming_refresh_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.data.response.status).to.equal(Responsemessages.parameter_true_message);
        }
        else
        {
            console.log("The Session Streams[Read]: true - Refresh failed response is:", response.body)
        }
    })

    it.only('Events App Settings[Write]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {

            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events App Settings[Read]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events App Notification[Write]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events App Notification[Read]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Delete]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Delete]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Delete]: false - Added and store certain response data.: DELETE /backend/api/v1/organisations/org_id/events/event_id/webinars/webinar_id', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars/'+global.third_Party_Zoom_Integration_ids, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'delete','',401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })
    
    it.only('Events Webinar Hosts[Write]: true - Again adding and store certain response data.: POST /backend/api/v1/organisations/org_id/events/event_id/webinars', async () => 
    {
        global.srinivas__email_id = "srinivas.kantipudi@hubilo.com";
        global.srinivas_fname = casual.first_name;
        global.srinivas_lname = casual.last_name;
        const   admin_dash_user_add_webinar_host_body = 
        {
            "data": {
                "attendees_count": 3000,
                "email": global.srinivas__email_id,
                "first_name": global.srinivas_fname,
                "last_name": global.srinivas_lname
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_webinar_host_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_fail_as_value);
            expect(response.body.data.msg).to.equal(Responsemessages.parameter_fail_host_message_part1_as_value+global.srinivas__email_id+Responsemessages.parameter_fail_host_message_part2_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Read]: true - Added and store certain response data.: GET /backend/api/v1/organisations/org_id/events/event_id/webinars', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            global.host_added_on_admin_dash_id = response.body.data.webinar_host_data[0].id;
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.webinar_host_data[0].email).to.equal(global.srinivas__email_id);
            expect(response.body.data.webinar_host_data[0].attendees_count).to.equal(3000);
            expect(response.body.data.total_page).to.equal(1);
            expect(response.body.data.total_count).to.equal(1);
            expect(response.body.data.current_page).to.equal(1);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Write]: true - Again updating and store certain response data.: PUT /backend/api/v1/organisations/org_id/events/event_id/webinars/webinar_id', async () => 
    {
        const   admin_dash_user_update_webinar_host_body = 
        {
            "data": {
                "attendees_count": 3000,
                "email": global.srinivas__email_id,
                "first_name": global.srinivas_fname,
                "last_name": global.srinivas_lname
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars/'+global.third_Party_Zoom_Integration_ids, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', admin_dash_user_update_webinar_host_body)
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data).to.equal(Responsemessages.parameter_Data_save_successfully_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Write]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Write]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Delete]: false - Added and store certain response data.: DELETE /backend/api/v1/organisations/org_id/events/event_id/webinars/webinar_id', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars/'+global.third_Party_Zoom_Integration_ids, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'delete','',401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Write]: false - Again adding and store certain response data.: POST /backend/api/v1/organisations/org_id/events/event_id/webinars', async () => 
    {
        global.srinivas__email_id = "srinivas.kantipudi@hubilo.com";
        global.srinivas_fname = casual.first_name;
        global.srinivas_lname = casual.last_name;
        const   admin_dash_user_add_webinar_host_body = 
        {
            "data": {
                "attendees_count": 3000,
                "email": global.srinivas__email_id,
                "first_name": global.srinivas_fname,
                "last_name": global.srinivas_lname
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_webinar_host_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Read]: true - Added and store certain response data.: GET /backend/api/v1/organisations/org_id/events/event_id/webinars', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            global.host_added_on_admin_dash_id = response.body.data.webinar_host_data[0].id;
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.webinar_host_data[0].email).to.equal(global.srinivas__email_id);
            expect(response.body.data.webinar_host_data[0].attendees_count).to.equal(3000);
            expect(response.body.data.total_page).to.equal(1);
            expect(response.body.data.total_count).to.equal(1);
            expect(response.body.data.current_page).to.equal(1);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Read]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Read]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Delete]: false - Added and store certain response data.: DELETE /backend/api/v1/organisations/org_id/events/event_id/webinars/webinar_id', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars/'+global.third_Party_Zoom_Integration_ids, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'delete','',401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Write]: false - Again adding and store certain response data.: POST /backend/api/v1/organisations/org_id/events/event_id/webinars', async () => 
    {
        global.srinivas__email_id = "srinivas.kantipudi@hubilo.com";
        global.srinivas_fname = casual.first_name;
        global.srinivas_lname = casual.last_name;
        const   admin_dash_user_add_webinar_host_body = 
        {
            "data": {
                "attendees_count": 3000,
                "email": global.srinivas__email_id,
                "first_name": global.srinivas_fname,
                "last_name": global.srinivas_lname
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', admin_dash_user_add_webinar_host_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Webinar Hosts[Read]: false - Added and store certain response data.: GET /backend/api/v1/organisations/org_id/events/event_id/webinars', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/webinars', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get','',401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })
    
    it.only('Events Event Settings[Read]: true - Super Admin updated the added Admin Dashboard role, to validate the session host and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Session Streams[Write]: false - Super Admin updated the added Admin Dashboard role, to validate the session host and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Event Settings[Read]: true - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Event Settings[Read]: true - Verify the Admin Dashboard user is able to read and verify the response: GET /backend/api/v1/organisations/org_id/events/event_id/settings', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/settings', {'Content-Type':'application/json','authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.id).to.equal(global.org_dash_signup_event_id);
            expect(response.body.data.name).to.equal(global.org_dash_created_event_name);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Session Streams[Read]: true - Fetch and verify response data: GET /backend/api/v1/organisations/org_id/events/event_id/sessions', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            global.admin_dash_rtmp_url = response.body.data.session_stream_data[0].rtmp_url;
            global.admin_dash_stream_key = response.body.data.session_stream_data[0].stream_key;
            global.admin_dash_stream_url = response.body.data.session_stream_data[0].stream_link;
            global.admin_dash_player_meta_type_id = response.body.data.session_stream_data[0].player_meta_type_id;
            global.admin_dash_player_player_type_id = response.body.data.session_stream_data[0].player_type_id;
            global.admin_dash_player_source_id = response.body.data.session_stream_data[0].rtmp_source_id;

            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body.data.session_stream_data[0].id).to.equal(global.org_dash_added_session_id);
            expect(response.body.data.session_stream_data[0].name).to.equal(global.org_dash_add_agenda_title);
            expect(response.body.data.webinar_host_list[0].id).to.equal(global.third_Party_Zoom_Integration_ids);
        }
        else
        {
            console.log("The Events Session Streams[Read]: false failed response is:", response.body)
        }
    })

    it.only('Events Session Streams[Write]: false - Update and verify response data: PUT /backend/api/v1/organisations/org_id/events/event_id/sessions/session_id', async () => 
    {
        const   org_dash_session_streaming_update_body = 
        {
            "data": {
                "host_id": null,
                "source_id": global.admin_dash_player_source_id_try_edit,
                "rtmp_url": global.admin_dash_rtmp_url_try_edit,
                "stream_key": global.admin_dash_stream_key_try_edit,
                "stream_url": global.admin_dash_stream_url_try_edit,
                "player_type_id": global.admin_dash_player_player_type_id_try_edit,
                "player_meta_type_id": global.admin_dash_player_meta_type_id_try_edit,
                "player_meta_data": ""
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions/'+global.org_dash_added_session_id, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', org_dash_session_streaming_update_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The Session Streams[Write]: false - Update failed response is:", response.body)
        }
    })

    it.only('Events Session Streams[Read]: false - Refresh and verify response data: POST /backend/api/v1/organisations/org_id/events/event_id/sessions/session_id/refresh', async () => 
    {
        const   org_dash_session_streaming_refresh_body = 
        {
            "data": {
                "email": global.user_email_id
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions/'+global.org_dash_added_session_id+'/refresh', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', org_dash_session_streaming_refresh_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The Session Streams[Read]: true - Refresh failed response is:", response.body)
        }
    })

    it.only('Events Session Streams[Read]: false - Super Admin updated the added Admin Dashboard role, to validate the session host and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Event Settings[Read]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Session Streams[Read]: false - Fetch and verify response data: GET /backend/api/v1/organisations/org_id/events/event_id/sessions', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get', '', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The Events Session Streams[Read]: false failed response is:", response.body)
        }
    })

    it.only('Events Session Streams[Write]: false - Update and verify response data: PUT /backend/api/v1/organisations/org_id/events/event_id/sessions/session_id', async () => 
    {
        const   org_dash_session_streaming_update_body = 
        {
            "data": {
                "host_id": null,
                "source_id": global.admin_dash_player_source_id_try_edit,
                "rtmp_url": global.admin_dash_rtmp_url_try_edit,
                "stream_key": global.admin_dash_stream_key_try_edit,
                "stream_url": global.admin_dash_stream_url_try_edit,
                "player_type_id": global.admin_dash_player_player_type_id_try_edit,
                "player_meta_type_id": global.admin_dash_player_meta_type_id_try_edit,
                "player_meta_data": ""
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions/'+global.org_dash_added_session_id, {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'put', org_dash_session_streaming_update_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The Session Streams[Write]: false - Update failed response is:", response.body)
        }
    })

    it.only('Events Session Streams[Read]: false - Refresh and verify response data: POST /backend/api/v1/organisations/org_id/events/event_id/sessions/session_id/refresh', async () => 
    {
        const   org_dash_session_streaming_refresh_body = 
        {
            "data": {
                "email": global.user_email_id
            }
        }
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/organisations/'+global.org_dash_signup_id+'/events/'+global.org_dash_signup_event_id+'/sessions/'+global.org_dash_added_session_id+'/refresh', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'post', org_dash_session_streaming_refresh_body, 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The Session Streams[Read]: true - Refresh failed response is:", response.body)
        }
    })

    it.only('Events Certificates & Tokens[Write]: false - Super Admin updated the added Admin Dashboard role, to validate the session host and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Events Certificates & Tokens[Read]: false - Super Admin updated the added Admin Dashboard role, to validate the session host and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(7);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Overview_as_value);

            expect(response.body.data.permissions[1].permissionId).to.equal(8);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Event_Settings_as_value);

            expect(response.body.data.permissions[2].permissionId).to.equal(9);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Fees_n_Commissions_as_value);

            expect(response.body.data.permissions[3].permissionId).to.equal(10);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Ticketing_Transfer_as_value);

            expect(response.body.data.permissions[4].permissionId).to.equal(11);
            expect(response.body.data.permissions[4].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[4].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[4].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[4].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[4].name).to.equal(Responsemessages.parameter_Features_n_Pricing_as_value);

            expect(response.body.data.permissions[5].permissionId).to.equal(12);
            expect(response.body.data.permissions[5].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[5].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[5].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[5].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[5].name).to.equal(Responsemessages.parameter_Coupon_Codes_as_value);

            expect(response.body.data.permissions[6].permissionId).to.equal(13);
            expect(response.body.data.permissions[6].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[6].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[6].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[6].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[6].name).to.equal(Responsemessages.parameter_App_Settings_as_value);
           
            expect(response.body.data.permissions[7].permissionId).to.equal(14);
            expect(response.body.data.permissions[7].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[7].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[7].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[7].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[7].name).to.equal(Responsemessages.parameter_App_Notification_as_value);

            expect(response.body.data.permissions[8].permissionId).to.equal(15);
            expect(response.body.data.permissions[8].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[8].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[8].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[8].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[8].name).to.equal(Responsemessages.parameter_Webinar_Hosts_as_value);  

            expect(response.body.data.permissions[9].permissionId).to.equal(16);
            expect(response.body.data.permissions[9].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[9].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[9].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[9].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[9].name).to.equal(Responsemessages.parameter_Session_Streams_as_value); 

            expect(response.body.data.permissions[10].permissionId).to.equal(17);
            expect(response.body.data.permissions[10].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[10].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[10].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[10].type).to.equal(Responsemessages.parameter_EVENTS_as_value);
            expect(response.body.data.permissions[10].name).to.equal(Responsemessages.parameter_Certificates_n_Tokens_as_value); 

            expect(response.body.data.permissions[11].permissionId).to.equal(18);
            expect(response.body.data.permissions[11].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[11].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[11].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[11].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[11].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[11].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[12].permissionId).to.equal(19);
            expect(response.body.data.permissions[12].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[12].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[12].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[12].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[12].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[12].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[13].permissionId).to.equal(20);
            expect(response.body.data.permissions[13].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[13].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[13].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[13].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[13].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[13].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[14].permissionId).to.equal(21);
            expect(response.body.data.permissions[14].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[14].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[14].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[14].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[14].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[14].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Disable Events - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(18);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[1].permissionId).to.equal(19);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[2].permissionId).to.equal(20);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[3].permissionId).to.equal(21);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Disable Events - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Disable Events - Verify the registered org is present on the admin dashboard and verify the changes Organiser disable the entire ORGANISATIONS section: GET /backend/api/v1/events', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/events', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken /*, 'buildversion':'1.2'*/ },'get','', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Logs My Logs[Read]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(18);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[1].permissionId).to.equal(19);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[2].permissionId).to.equal(20);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[3].permissionId).to.equal(21);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Logs My Logs[Read]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Logs My Logs[Read]: true - Added and store certain response data.: GET /backend/api/v1/activitylog', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/activitylog', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get')
        if (response.status == 200)
        {
            expect(response.body.status).to.equal(Responsemessages.parameter_success_as_value);
            expect(response.body).to.have.all.keys("status","data");
            expect(response.body.data).to.have.all.keys("organisationData","current_page","total_count","total_page");
            expect(response.body.data.organisationData[0]).to.have.all.keys("hubilo_admin_id","msg","created_at","admin");
            expect(response.body.data.organisationData[0].admin).to.have.all.keys("id","first_name","last_name");
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Logs All Logs[Read]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);
 
            expect(response.body.data.permissions[0].permissionId).to.equal(18);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_My_Logs_as_value); 

            expect(response.body.data.permissions[1].permissionId).to.equal(19);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_LOGS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_All_Logs_as_value); 

            expect(response.body.data.permissions[2].permissionId).to.equal(20);
            expect(response.body.data.permissions[2].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[2].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[2].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[2].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[2].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[2].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[3].permissionId).to.equal(21);
            expect(response.body.data.permissions[3].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[3].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[3].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[3].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[3].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[3].name).to.equal(Responsemessages.parameter_Roles_as_value); 

        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Logs All Logs[Read]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Logs All Logs[Read]: false - Added and store certain response data.: GET /backend/api/v1/activitylog', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/activitylog', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken , 'buildversion':'1.2' },'get','', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Disable Logs - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(20);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[1].permissionId).to.equal(21);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Disable Logs - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Disable Logs - Verify the registered org is present on the admin dashboard and verify the changes Organiser disable the entire LOG section: GET /backend/api/v1/activitylog', async () => 
    {
        var response = await sendRequest(environment.baseURL5, '/backend/api/v1/activitylog', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken /*, 'buildversion':'1.2'*/ },'get','', 401)
        if (response.status != 200)
        {
            expect(response.body.error).to.equal(Responsemessages.parameter_Permission_access_not_granted_alert_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Users[Write]: true - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(20);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[1].permissionId).to.equal(21);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Users[Write]: true - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Admin Dashboard: Assigning role to the list of users present in the system: PATCH /api/v1/roles/assign', async () => 
    {
        const super_mapping_users_to_single_role=
        {
            "roleIds": [global.role_id],
            "userIds": global.list_of_users_ids_for_mapping_single_role
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/assign', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'patch', super_mapping_users_to_single_role)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data).to.equal(Responsemessages.parameter_true_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Admin Dashboard: Fetch the list of roles, to be mapped all the roles to the user: GET /api/v1/roles?page=0&limit=100', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles?page=0&limit=1000000000000000', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'get')
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body).to.have.all.keys("data", "message");
            expect(response.body.data).to.have.all.keys("items","totalCount", "totalPages", "currentPage");
            expect(response.body.data.items[0]).to.have.all.keys("id", "name","description","isDeactivated","isDefault","permissions");
            expect(response.body.data.items[0].permissions[0]).to.have.all.keys("permissionId", "roleId","readGranted","writeGranted","deleteGranted","platform","type","name");

            global.total_roles_added = response.body.data.totalCount;
            global.list_of_role_ids = [];

            for (var i=0; i<global.total_roles_added; i++)
            {
                global.fetched_role_id = response.body.data.items[i].id
                global.list_of_role_ids.push(global.fetched_role_id)

            }

        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Users[Write]: true - Add another new Admin Dashboard user to map all the roles by admin dashboard: POST /api/v1/users', async () => 
    {
        global.user_fname_2 = casual.first_name;
        global.user_lname_2 = casual.last_name;
        const str1 = 'rajeev+';
        const str2 = '@hubilo.com';
        const new_date = new Date();
        let timestamp_for_role = new_date.getTime();
        global.mapping_all_roles_final_email_2 = str1+timestamp_for_role+str2;
        
        const   add_user_body = 
        {
            "firstName": global.user_fname_2,
            "lastName": global.user_lname_2,
            "email": global.mapping_all_roles_final_email_2,
            "roleIds": global.list_of_role_ids,
            "isDeactivated": false
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users', {'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'post', add_user_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.firstName).to.equal(global.user_fname_2);
            expect(response.body.data.lastName).to.equal(global.user_lname_2);
            expect(response.body.data.email).to.equal(global.mapping_all_roles_final_email_2);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.hasLoggedIn).to.equal(Responsemessages.parameter_false_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Admin Dashboard: Fetch the list of roles, to be mapped multiple the roles to the user: GET /api/v1/roles?page=0&limit=100', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles?page=0&limit=1000000000000000', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'get')
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body).to.have.all.keys("data", "message");
            expect(response.body.data).to.have.all.keys("items","totalCount", "totalPages", "currentPage");
            expect(response.body.data.items[0]).to.have.all.keys("id", "name","description","isDeactivated","isDefault","permissions");
            expect(response.body.data.items[0].permissions[0]).to.have.all.keys("permissionId", "roleId","readGranted","writeGranted","deleteGranted","platform","type","name");

            global.total_roles_added = response.body.data.totalCount;
            global.multiple_role_count = (global.total_roles_added)-1
            global.list_of_role_ids = [];

            for (var i=0; i<global.multiple_role_count; i++)
            {
                global.fetched_role_id = response.body.data.items[i].id
                global.list_of_role_ids.push(global.fetched_role_id)
            }
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Admin Dashboard: Add another new Admin Dashboard user to map multiple the roles. POST /api/v1/users', async () => 
    {
        global.user_fname_1 = casual.first_name;
        global.user_lname_1 = casual.last_name;
        const str1 = 'rajeev+';
        const str2 = '@hubilo.com';
        const new_date = new Date();
        let timestamp_for_role = new_date.getTime();
        global.mapping_all_roles_final_email_3 = str1+timestamp_for_role+str2;
        
        const   add_user_body = 
        {
            "firstName": global.user_fname_1,
            "lastName": global.user_lname_1,
            "email": global.mapping_all_roles_final_email_3,
            "roleIds": global.list_of_role_ids,
            "isDeactivated": false
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users', {'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'post', add_user_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.firstName).to.equal(global.user_fname_1);
            expect(response.body.data.lastName).to.equal(global.user_lname_1);
            expect(response.body.data.email).to.equal(global.mapping_all_roles_final_email_3);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.hasLoggedIn).to.equal(Responsemessages.parameter_false_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Users[Write]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(20);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[1].permissionId).to.equal(21);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Users[Write]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Users[Read]: true - Fetch the list of users on the super admin: GET /api/v1/users?page=0&limit=1', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users?page=0&limit=1', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'get')
        if (response.status == 200)
        {
            global.admin_dashboard_user_id_from_list = response.body.data.items[0].id;
            global.admin_dashboard_user_firstName_from_list = response.body.data.items[0].firstName;
            global.admin_dashboard_user_lastName_from_list = response.body.data.items[0].lastName;
            global.admin_dashboard_user_email = response.body.data.items[0].email;

            global.admin_dashboard_user_role_id_from_list = response.body.data.items[0].roles[0].id;
            global.admin_dashboard_user_role_name_from_list = response.body.data.items[0].roles[0].name;

            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Users[Write]: false - Edit and update the Admin Dashboard user email id and validate the response on super admin: PUT /api/v1/users/', async () => 
    {        
        const   update_user_email_body = 
        {
            "firstName": global.admin_dashboard_user_firstName_from_list,
            "lastName": global.admin_dashboard_user_lastName_from_list,
            "email": global.admin_dashboard_user_email,
            "id": global.admin_dashboard_user_id_from_list,
            "roleIds": [
                global.role_id
            ],
            "isDeactivated": false
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/'+global.admin_dashboard_user_id_from_list, {'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'put', update_user_email_body, 401)
        if (response.status != 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_Sufficient_Permission_not_given_for_current_user_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Users[Read]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(20);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[1].permissionId).to.equal(21);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Users[Read]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Users[Read]: false - Fetch the list of users on the super admin: GET /api/v1/users?page=0&limit=1', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users?page=0&limit=1', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'get', '', 401)
        if (response.status != 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_Sufficient_Permission_not_given_for_current_user_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Users[Write]: false - Edit and update the Admin Dashboard user email id and validate the response on super admin: PUT /api/v1/roles/', async () => 
    {        
        const   update_user_email_body = 
        {
            "firstName": global.admin_dashboard_user_firstName_from_list,
            "lastName": global.admin_dashboard_user_lastName_from_list,
            "email": global.admin_dashboard_user_email,
            "id": global.admin_dashboard_user_id_from_list,
            "roleIds": [
                global.admin_dashboard_user_role_id_from_list
            ],
            "isDeactivated": true
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/'+global.admin_dashboard_user_id_from_list, {'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'put', update_user_email_body, 401)
        if (response.status != 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_Sufficient_Permission_not_given_for_current_user_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Roles[Write]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(20);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[1].permissionId).to.equal(21);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_true_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Roles[Write]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Roles[Read]: true - Fetch the list of users on the super admin: GET /api/v1/roles?page=0&limit=1', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles?page=0&limit=1', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'get')
        if (response.status == 200)
        {
            global.admin_dashboard_roles_id_from_list = response.body.data.items[0].id;
            global.admin_dashboard_roles_name_from_list = response.body.data.items[0].name;
            global.admin_dashboard_roles_description_from_list = response.body.data.items[0].description;
            global.admin_dashboard_roles_isDeactivated = response.body.data.items[0].isDeactivated;
            global.admin_dashboard_roles_isDefault = response.body.data.items[0].isDefault;
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Roles[Write]: false - Edit and update the Admin Dashboard user email id and validate the response on super admin: PUT /api/v1/roles/', async () => 
    {        
        const   update_user_email_body = 
        {
            "name": global.admin_dashboard_roles_name_from_list,
            "description": global.admin_dashboard_roles_description_from_list,
            "permissions": [
                {
                    "permissionId": 22,
                    "code": "O-E-OVERALL",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 23,
                    "code": "O-E-REGISTRATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 24,
                    "code": "O-E-SESSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 25,
                    "code": "O-E-PEOPLE",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 26,
                    "code": "O-E-VIRTUAL_BOOTHS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 27,
                    "code": "O-E-MEETINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 28,
                    "code": "O-E-LOUNGE",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 29,
                    "code": "O-E-ROOMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 30,
                    "code": "O-E-ENGAGEMENT",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 31,
                    "code": "O-E-EMBEDDED_APPS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 32,
                    "code": "O-E-BRANDING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 33,
                    "code": "O-E-ANALYTICS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 34,
                    "code": "O-E-SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 35,
                    "code": "O-E-RECORDING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 36,
                    "code": "O-E-FILE_LOGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 37,
                    "code": "O-C-OVERALL",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 38,
                    "code": "O-AN-OVERALL",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 39,
                    "code": "O-I-ALL_INTEGRATIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 40,
                    "code": "O-A-ACCOUNT_DETAILS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 41,
                    "code": "O-A-PAYOUT",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 42,
                    "code": "O-A-TEAM",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 43,
                    "code": "O-A-SUBSCRIPTION_AND_BILLINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                }
            ],
            "id": global.admin_dashboard_roles_id_from_list
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.admin_dashboard_roles_id_from_list, {'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'put', update_user_email_body, 401)
        if (response.status != 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_Sufficient_Permission_not_given_for_current_user_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Roles[Read]: false - Super Admin updated the added Admin Dashboard role, by disabling and verify the response: PUT /api/v1/roles/'+process.env.role_id, async () => 
    {
        const   edit_role_body = 
        {
            "name": global.role_name,
            "description": global.role_description,
            "permissions": [
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": false,
                    "writeGranted": false,
                    "deleteGranted": false
                }
            ],
            "id": global.role_id
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.role_id,{'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'put', edit_role_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.name).to.equal(global.role_name);
            expect(response.body.data.description).to.equal(global.role_description);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.isDefault).to.equal(Responsemessages.parameter_false_message);

            expect(response.body.data.permissions[0].permissionId).to.equal(20);
            expect(response.body.data.permissions[0].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[0].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[0].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[0].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[0].name).to.equal(Responsemessages.parameter_Users_as_value); 

            expect(response.body.data.permissions[1].permissionId).to.equal(21);
            expect(response.body.data.permissions[1].roleId).to.equal(global.role_id);
            expect(response.body.data.permissions[1].readGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].writeGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].deleteGranted).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.permissions[1].platform).to.equal(Responsemessages.parameter_ADMIN_DASHBOARD_as_value);
            expect(response.body.data.permissions[1].type).to.equal(Responsemessages.parameter_USERS_as_value);
            expect(response.body.data.permissions[1].name).to.equal(Responsemessages.parameter_Roles_as_value); 
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Roles[Read]: false - Make the admin dashboard user login again and store the etoken to validate the changes Organiser disable: POST /api/v1/users/login', async () => 
    {
        const   admin_dash_user_login_body = 
        {
            "email": global.user_email_id,
            "password": "123456"
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users/login', {'Content-Type':'application/json'},'post', admin_dash_user_login_body)
        if (response.status == 200)
        {
            global.admin_dashboard_user_etoken = response.body.data.accessToken
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Roles[Write]: false - Edit and update the Admin Dashboard user email id and validate the response on super admin: PUT /api/v1/roles/', async () => 
    {        
        const   update_user_email_body = 
        {
            "name": global.admin_dashboard_roles_name_from_list,
            "description": global.admin_dashboard_roles_description_from_list,
            "permissions": [
                {
                    "permissionId": 22,
                    "code": "O-E-OVERALL",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 23,
                    "code": "O-E-REGISTRATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 24,
                    "code": "O-E-SESSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 25,
                    "code": "O-E-PEOPLE",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 26,
                    "code": "O-E-VIRTUAL_BOOTHS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 27,
                    "code": "O-E-MEETINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 28,
                    "code": "O-E-LOUNGE",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 29,
                    "code": "O-E-ROOMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 30,
                    "code": "O-E-ENGAGEMENT",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 31,
                    "code": "O-E-EMBEDDED_APPS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 32,
                    "code": "O-E-BRANDING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 33,
                    "code": "O-E-ANALYTICS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 34,
                    "code": "O-E-SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 35,
                    "code": "O-E-RECORDING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 36,
                    "code": "O-E-FILE_LOGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 37,
                    "code": "O-C-OVERALL",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 38,
                    "code": "O-AN-OVERALL",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 39,
                    "code": "O-I-ALL_INTEGRATIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 40,
                    "code": "O-A-ACCOUNT_DETAILS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 41,
                    "code": "O-A-PAYOUT",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 42,
                    "code": "O-A-TEAM",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 43,
                    "code": "O-A-SUBSCRIPTION_AND_BILLINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                }
            ],
            "id": global.admin_dashboard_roles_id_from_list
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/'+global.admin_dashboard_roles_id_from_list, {'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'put', update_user_email_body, 401)
        if (response.status != 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_Sufficient_Permission_not_given_for_current_user_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('USERS Roles[Read]: false - Fetch the list of users on the super admin: GET /api/v1/roles?page=0&limit=1', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles?page=0&limit=1', {'Content-Type':'application/json', 'authorization':'Bearer '+global.admin_dashboard_user_etoken},'get','', 401)
        if (response.status != 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_Sufficient_Permission_not_given_for_current_user_as_value);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Super Admin: Fetch the list of users and validating wether the user is activate, logged in and send invitation on the super admin: GET /api/v1/users?page=0&limit=10', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users?page=0&limit=100', {'Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'get')
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            global.isactivated_isDeactivated = response.body.data.items[0].isDeactivated;
            global.hasLoggedIn_notLoggedIn = response.body.data.items[0].hasLoggedIn;
            if (global.isactivated_isDeactivated==Responsemessages.parameter_true_message && global.hasLoggedIn_notLoggedIn ==Responsemessages.parameter_true_message)
            {
                console.log("deactivated & logged in.")
            }
            else if (global.isactivated_isDeactivated==Responsemessages.parameter_true_message && global.hasLoggedIn_notLoggedIn ==Responsemessages.parameter_false_message)
            {
                console.log("deactivated & not logged in.")
            }
            else if(global.isactivated_isDeactivated==Responsemessages.parameter_false_message && global.hasLoggedIn_notLoggedIn ==Responsemessages.parameter_true_message)
            {
                console.log("activated & logged in.")
            }
            else
            {
                console.log("activated & not logged in.")
            }
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Super Admin: Fetch the list of roles, to be mapped all the roles to the user: GET /api/v1/roles?page=0&limit=100', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles?page=0&limit=1000000000000000', {'Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'get')
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body).to.have.all.keys("data", "message");
            expect(response.body.data).to.have.all.keys("items","totalCount", "totalPages", "currentPage");
            expect(response.body.data.items[0]).to.have.all.keys("id", "name","description","isDeactivated","isDefault","permissions");
            expect(response.body.data.items[0].permissions[0]).to.have.all.keys("permissionId", "roleId","readGranted","writeGranted","deleteGranted","platform","type","name");

            global.total_roles_added = response.body.data.totalCount;
            global.list_of_role_ids = [];

            for (var i=0; i<global.total_roles_added; i++)
            {
                global.fetched_role_id = response.body.data.items[i].id
                global.list_of_role_ids.push(global.fetched_role_id)
            }
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Add another new Admin Dashboard user to map all the roles by super admin: POST /api/v1/users', async () => 
    {
        global.user_fname_1 = casual.first_name;
        global.user_lname_1 = casual.last_name;
        const str1 = 'rajeev+';
        const str2 = '@hubilo.com';
        const new_date = new Date();
        let timestamp_for_role = new_date.getTime();
        global.mapping_all_roles_final_email_1 = str1+timestamp_for_role+str2;
        
        const   add_user_body = 
        {
            "firstName": global.user_fname_1,
            "lastName": global.user_lname_1,
            "email": global.mapping_all_roles_final_email_1,
            "roleIds": global.list_of_role_ids,
            "isDeactivated": false
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users', {'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'post', add_user_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.firstName).to.equal(global.user_fname_1);
            expect(response.body.data.lastName).to.equal(global.user_lname_1);
            expect(response.body.data.email).to.equal(global.mapping_all_roles_final_email_1);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.hasLoggedIn).to.equal(Responsemessages.parameter_false_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Super Admin: Fetch the list of roles, to be mapped multiple the roles to the user: GET /api/v1/roles?page=0&limit=100', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles?page=0&limit=1000000000000000', {'Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'get')
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body).to.have.all.keys("data", "message");
            expect(response.body.data).to.have.all.keys("items","totalCount", "totalPages", "currentPage");
            expect(response.body.data.items[0]).to.have.all.keys("id", "name","description","isDeactivated","isDefault","permissions");
            expect(response.body.data.items[0].permissions[0]).to.have.all.keys("permissionId", "roleId","readGranted","writeGranted","deleteGranted","platform","type","name");

            global.total_roles_added = response.body.data.totalCount;
            global.multiple_role_count = (global.total_roles_added)-1
            global.list_of_role_ids = [];

            for (var i=0; i<global.multiple_role_count; i++)
            {
                global.fetched_role_id = response.body.data.items[i].id
                global.list_of_role_ids.push(global.fetched_role_id)
            }

        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Add another new Admin Dashboard user to map multiple the roles by super admin: POST /api/v1/users', async () => 
    {
        global.user_fname_1 = casual.first_name;
        global.user_lname_1 = casual.last_name;
        const str1 = 'rajeev+';
        const str2 = '@hubilo.com';
        const new_date = new Date();
        let timestamp_for_role = new_date.getTime();
        global.mapping_all_roles_final_email_3 = str1+timestamp_for_role+str2;
        
        const   add_user_body = 
        {
            "firstName": global.user_fname_1,
            "lastName": global.user_lname_1,
            "email": global.mapping_all_roles_final_email_3,
            "roleIds": global.list_of_role_ids,
            "isDeactivated": false
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users', {'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'post', add_user_body)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data.firstName).to.equal(global.user_fname_1);
            expect(response.body.data.lastName).to.equal(global.user_lname_1);
            expect(response.body.data.email).to.equal(global.mapping_all_roles_final_email_3);
            expect(response.body.data.isDeactivated).to.equal(Responsemessages.parameter_false_message);
            expect(response.body.data.hasLoggedIn).to.equal(Responsemessages.parameter_false_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Super Admin: Fetch the list of users present in the system: GET /api/v1/users?page=0&limit=3', async () => 
    {
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/users?page=0&limit=3', {'Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'get')
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            global.total_users_added = 3;
            global.list_of_users_ids = [];

            for (var i=0; i<global.total_users_added; i++)
            {
                global.fetched_user_id = response.body.data.items[i].id;
                global.list_of_users_ids.push(global.fetched_user_id);
            }
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Super Admin: Add new Admin Dashboard role to map the list of admin users from the list: POST /api/v1/roles', async () => 
    {
        var role_title_list_users = casual.title;
        var role_description_list_users = casual.description;

        global.role_title_list_users;
        global.role_description_list_users;

        const   add_role_body = 
        {
            "name": role_title_list_users,
            "description": role_description_list_users,
            "permissions": [
                {
                    "permissionId": 1,
                    "code": "A-O-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 2,
                    "code": "A-O-ORGANISER_PROFILE",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 3,
                    "code": "A-O-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 4,
                    "code": "A-O-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 5,
                    "code": "A-O-ORGANISER_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 6,
                    "code": "A-O-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 7,
                    "code": "A-E-OVERVIEW",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 8,
                    "code": "A-E-EVENT_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 9,
                    "code": "A-E-FEES_AND_COMMISSIONS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 10,
                    "code": "A-E-TICKETING_TRANSFER",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 11,
                    "code": "A-E-FEATURES_AND_PRICING",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 12,
                    "code": "A-E-COUPON_CODES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 13,
                    "code": "A-E-APP_SETTINGS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 14,
                    "code": "A-E-APP_NOTIFICATION",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 15,
                    "code": "A-E-WEBINAR_HOSTS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": true
                },
                {
                    "permissionId": 16,
                    "code": "A-E-SESSION_STREAMS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 17,
                    "code": "A-E-CERTIFICATE_TOKEN",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 18,
                    "code": "A-L-MY_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 19,
                    "code": "A-L-ALL_LOGS",
                    "readGranted": true,
                    "writeGranted": false,
                    "deleteGranted": false
                },
                {
                    "permissionId": 20,
                    "code": "A-U-USERS",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                },
                {
                    "permissionId": 21,
                    "code": "A-U-ROLES",
                    "readGranted": true,
                    "writeGranted": true,
                    "deleteGranted": false
                }
            ]
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles', {'accept':'application/json','Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'post', add_role_body)
        if (response.status == 200)
        {
            global.role_id_list_users = response.body.data.id;
            global.role_name_list_users = response.body.data.name;
            global.decsription_list_users = response.body.data.description;
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })

    it.only('Super Admin: Assigning role to the list of users present in the system: PATCH /api/v1/roles/assign', async () => 
    {
        const super_mapping_users_to_single_role=
        {
            "roleIds": [global.role_id_list_users],
            "userIds": global.list_of_users_ids
        }
        var response = await sendRequest(environment.superadmin_baseURL_1, '/api/v1/roles/assign', {'Content-Type':'application/json', 'authorization':'Bearer '+global.super_admin_etoken},'patch', super_mapping_users_to_single_role)
        if (response.status == 200)
        {
            expect(response.body.message).to.equal(Responsemessages.parameter_ok_message);
            expect(response.body.data).to.equal(Responsemessages.parameter_true_message);
        }
        else
        {
            console.log("The failed response is:", response.body)
        }
    })
})